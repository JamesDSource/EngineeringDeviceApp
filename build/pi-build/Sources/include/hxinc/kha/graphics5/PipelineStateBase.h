// Generated by Haxe 4.0.0-preview.5+1aaf080
#ifndef INCLUDED_kha_graphics5_PipelineStateBase
#define INCLUDED_kha_graphics5_PipelineStateBase

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(kha,graphics4,BlendingFactor)
HX_DECLARE_CLASS2(kha,graphics4,BlendingOperation)
HX_DECLARE_CLASS2(kha,graphics4,CompareMode)
HX_DECLARE_CLASS2(kha,graphics4,CullMode)
HX_DECLARE_CLASS2(kha,graphics4,StencilAction)
HX_DECLARE_CLASS2(kha,graphics4,VertexStructure)
HX_DECLARE_CLASS2(kha,graphics5,FragmentShader)
HX_DECLARE_CLASS2(kha,graphics5,PipelineStateBase)
HX_DECLARE_CLASS2(kha,graphics5,VertexShader)

namespace kha{
namespace graphics5{


class HXCPP_CLASS_ATTRIBUTES PipelineStateBase_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef PipelineStateBase_obj OBJ_;
		PipelineStateBase_obj();

	public:
		enum { _hx_ClassId = 0x02468696 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="kha.graphics5.PipelineStateBase")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,true,"kha.graphics5.PipelineStateBase"); }
		static hx::ObjectPtr< PipelineStateBase_obj > __new();
		static hx::ObjectPtr< PipelineStateBase_obj > __alloc(hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~PipelineStateBase_obj();

		HX_DO_RTTI_ALL;
		hx::Val __Field(const ::String &inString, hx::PropertyAccess inCallProp);
		hx::Val __SetField(const ::String &inString,const hx::Val &inValue, hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PipelineStateBase",20,d7,a1,02); }

		::Array< ::Dynamic> inputLayout;
		 ::kha::graphics5::VertexShader vertexShader;
		 ::kha::graphics5::FragmentShader fragmentShader;
		 ::kha::graphics4::CullMode cullMode;
		bool depthWrite;
		 ::kha::graphics4::CompareMode depthMode;
		 ::kha::graphics4::CompareMode stencilMode;
		 ::kha::graphics4::StencilAction stencilBothPass;
		 ::kha::graphics4::StencilAction stencilDepthFail;
		 ::kha::graphics4::StencilAction stencilFail;
		int stencilReferenceValue;
		int stencilReadMask;
		int stencilWriteMask;
		 ::kha::graphics4::BlendingFactor blendSource;
		 ::kha::graphics4::BlendingFactor blendDestination;
		 ::kha::graphics4::BlendingOperation blendOperation;
		 ::kha::graphics4::BlendingFactor alphaBlendSource;
		 ::kha::graphics4::BlendingFactor alphaBlendDestination;
		 ::kha::graphics4::BlendingOperation alphaBlendOperation;
		::Array< bool > colorWriteMasksRed;
		::Array< bool > colorWriteMasksGreen;
		::Array< bool > colorWriteMasksBlue;
		::Array< bool > colorWriteMasksAlpha;
		bool set_colorWriteMask(bool value);
		::Dynamic set_colorWriteMask_dyn();

		bool get_colorWriteMaskRed();
		::Dynamic get_colorWriteMaskRed_dyn();

		bool set_colorWriteMaskRed(bool value);
		::Dynamic set_colorWriteMaskRed_dyn();

		bool get_colorWriteMaskGreen();
		::Dynamic get_colorWriteMaskGreen_dyn();

		bool set_colorWriteMaskGreen(bool value);
		::Dynamic set_colorWriteMaskGreen_dyn();

		bool get_colorWriteMaskBlue();
		::Dynamic get_colorWriteMaskBlue_dyn();

		bool set_colorWriteMaskBlue(bool value);
		::Dynamic set_colorWriteMaskBlue_dyn();

		bool get_colorWriteMaskAlpha();
		::Dynamic get_colorWriteMaskAlpha_dyn();

		bool set_colorWriteMaskAlpha(bool value);
		::Dynamic set_colorWriteMaskAlpha_dyn();

		bool conservativeRasterization;
};

} // end namespace kha
} // end namespace graphics5

#endif /* INCLUDED_kha_graphics5_PipelineStateBase */ 
