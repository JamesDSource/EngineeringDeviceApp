// Generated by Haxe 4.0.0-preview.5+1aaf080
#include <hxcpp.h>

#ifndef INCLUDED_components_Component
#include <hxinc/components/Component.h>
#endif
#ifndef INCLUDED_components_DivisionRect
#include <hxinc/components/DivisionRect.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_math_Vector2
#include <hxinc/kha/math/Vector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a23af74f2a39ae0e_3_new,"components.DivisionRect","new",0x252ca8db,"components.DivisionRect.new","components/DivisionRect.hx",3,0x84c59414)
HX_LOCAL_STACK_FRAME(_hx_pos_a23af74f2a39ae0e_17_draw,"components.DivisionRect","draw",0x5b54bf29,"components.DivisionRect.draw","components/DivisionRect.hx",17,0x84c59414)
HX_LOCAL_STACK_FRAME(_hx_pos_a23af74f2a39ae0e_29_getBoundingBox,"components.DivisionRect","getBoundingBox",0x02e5bb76,"components.DivisionRect.getBoundingBox","components/DivisionRect.hx",29,0x84c59414)
HX_LOCAL_STACK_FRAME(_hx_pos_a23af74f2a39ae0e_33_isOver,"components.DivisionRect","isOver",0xf0aabcc3,"components.DivisionRect.isOver","components/DivisionRect.hx",33,0x84c59414)
HX_LOCAL_STACK_FRAME(_hx_pos_a23af74f2a39ae0e_36_addChild,"components.DivisionRect","addChild",0x4f145960,"components.DivisionRect.addChild","components/DivisionRect.hx",36,0x84c59414)
namespace components{

void DivisionRect_obj::__construct( ::kha::math::Vector2 position,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_a23af74f2a39ae0e_3_new)
HXLINE(   9)		this->children = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  12)		this->position = position;
HXLINE(  13)		this->width = width;
HXLINE(  14)		this->height = height;
            	}

Dynamic DivisionRect_obj::__CreateEmpty() { return new DivisionRect_obj; }

void *DivisionRect_obj::_hx_vtable = 0;

Dynamic DivisionRect_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< DivisionRect_obj > _hx_result = new DivisionRect_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool DivisionRect_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x58a53f67;
}

static ::components::Component_obj _hx_components_DivisionRect__hx_components_Component= {
	( void (hx::Object::*)( ::kha::graphics2::Graphics))&::components::DivisionRect_obj::draw,
	(  ::Dynamic (hx::Object::*)())&::components::DivisionRect_obj::getBoundingBox,
	( ::Dynamic (hx::Object::*)(Float,Float))&::components::DivisionRect_obj::isOver,
};

void *DivisionRect_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x32011c87: return &_hx_components_DivisionRect__hx_components_Component;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void DivisionRect_obj::draw( ::kha::graphics2::Graphics graphics){
            	HX_STACKFRAME(&_hx_pos_a23af74f2a39ae0e_17_draw)
HXLINE(  18)		 ::kha::math::Vector2 _this = this->origin;
HXDLIN(  18)		 ::kha::math::Vector2 vec = this->position;
HXDLIN(  18)		Float globalPos_x = (_this->x + vec->x);
HXDLIN(  18)		Float globalPos_y = (_this->y + vec->y);
HXLINE(  20)		graphics->set_color(::kha::_Color::Color_Impl__obj::fromFloats(( (float)(0) ),( (float)(1) ),( (float)(0) ),1));
HXLINE(  21)		graphics->drawRect(globalPos_x,globalPos_y,this->width,this->height,null());
HXLINE(  23)		{
HXLINE(  23)			int _g = 0;
HXDLIN(  23)			::Array< ::Dynamic> _g1 = this->children;
HXDLIN(  23)			while((_g < _g1->length)){
HXLINE(  23)				::Dynamic child = _g1->__get(_g);
HXDLIN(  23)				_g = (_g + 1);
HXLINE(  24)				::components::Component_obj::draw(child,graphics);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(DivisionRect_obj,draw,(void))

 ::Dynamic DivisionRect_obj::getBoundingBox(){
            	HX_STACKFRAME(&_hx_pos_a23af74f2a39ae0e_29_getBoundingBox)
HXDLIN(  29)		return  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("topLeft",3c,09,c1,e8),null())
            			->setFixed(1,HX_("bottomRight",f1,a0,f4,4e),null()));
            	}


HX_DEFINE_DYNAMIC_FUNC0(DivisionRect_obj,getBoundingBox,return )

::Dynamic DivisionRect_obj::isOver(Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_a23af74f2a39ae0e_33_isOver)
HXDLIN(  33)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(DivisionRect_obj,isOver,return )

void DivisionRect_obj::addChild(::Dynamic child){
            	HX_GC_STACKFRAME(&_hx_pos_a23af74f2a39ae0e_36_addChild)
HXLINE(  37)		this->children->push(child);
HXLINE(  38)		 ::kha::math::Vector2 _this = this->origin;
HXDLIN(  38)		 ::kha::math::Vector2 vec = this->position;
HXDLIN(  38)		child->__SetField(HX_("origin",e6,19,01,4b), ::kha::math::Vector2_obj::__alloc( HX_CTX ,(_this->x + vec->x),(_this->y + vec->y)),hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC1(DivisionRect_obj,addChild,(void))


hx::ObjectPtr< DivisionRect_obj > DivisionRect_obj::__new( ::kha::math::Vector2 position,Float width,Float height) {
	hx::ObjectPtr< DivisionRect_obj > __this = new DivisionRect_obj();
	__this->__construct(position,width,height);
	return __this;
}

hx::ObjectPtr< DivisionRect_obj > DivisionRect_obj::__alloc(hx::Ctx *_hx_ctx, ::kha::math::Vector2 position,Float width,Float height) {
	DivisionRect_obj *__this = (DivisionRect_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(DivisionRect_obj), true, "components.DivisionRect"));
	*(void **)__this = DivisionRect_obj::_hx_vtable;
	__this->__construct(position,width,height);
	return __this;
}

DivisionRect_obj::DivisionRect_obj()
{
}

void DivisionRect_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(DivisionRect);
	HX_MARK_MEMBER_NAME(origin,"origin");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(children,"children");
	HX_MARK_END_CLASS();
}

void DivisionRect_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(origin,"origin");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(children,"children");
}

hx::Val DivisionRect_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"draw") ) { return hx::Val( draw_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { return hx::Val( origin ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"isOver") ) { return hx::Val( isOver_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( position ); }
		if (HX_FIELD_EQ(inName,"children") ) { return hx::Val( children ); }
		if (HX_FIELD_EQ(inName,"addChild") ) { return hx::Val( addChild_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getBoundingBox") ) { return hx::Val( getBoundingBox_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val DivisionRect_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"origin") ) { origin=inValue.Cast<  ::kha::math::Vector2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast<  ::kha::math::Vector2 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"children") ) { children=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void DivisionRect_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("origin",e6,19,01,4b));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("children",3f,19,6a,70));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo DivisionRect_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::math::Vector2 */ ,(int)offsetof(DivisionRect_obj,origin),HX_("origin",e6,19,01,4b)},
	{hx::fsObject /*  ::kha::math::Vector2 */ ,(int)offsetof(DivisionRect_obj,position),HX_("position",a9,a0,fa,ca)},
	{hx::fsFloat,(int)offsetof(DivisionRect_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsFloat,(int)offsetof(DivisionRect_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(DivisionRect_obj,children),HX_("children",3f,19,6a,70)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *DivisionRect_obj_sStaticStorageInfo = 0;
#endif

static ::String DivisionRect_obj_sMemberFields[] = {
	HX_("origin",e6,19,01,4b),
	HX_("position",a9,a0,fa,ca),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("children",3f,19,6a,70),
	HX_("draw",04,2c,70,42),
	HX_("getBoundingBox",11,e8,45,0d),
	HX_("isOver",5e,56,1f,67),
	HX_("addChild",bb,cf,16,bf),
	::String(null()) };

hx::Class DivisionRect_obj::__mClass;

void DivisionRect_obj::__register()
{
	DivisionRect_obj _hx_dummy;
	DivisionRect_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("components.DivisionRect",69,9f,22,22);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(DivisionRect_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< DivisionRect_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = DivisionRect_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = DivisionRect_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace components
