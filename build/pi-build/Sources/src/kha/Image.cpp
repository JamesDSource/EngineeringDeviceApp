// Generated by Haxe 4.0.0-preview.5+1aaf080
#include <hxcpp.h>

#ifndef INCLUDED_StringTools
#include <hxinc/StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Video
#include <hxinc/kha/Video.h>
#endif
#ifndef INCLUDED_kha__Color_Color_Impl_
#include <hxinc/kha/_Color/Color_Impl_.h>
#endif
#ifndef INCLUDED_kha_graphics1_Graphics
#include <hxinc/kha/graphics1/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics1
#include <hxinc/kha/graphics2/Graphics1.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureFormat
#include <hxinc/kha/graphics4/TextureFormat.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <hxinc/kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_kore_Video
#include <hxinc/kha/kore/Video.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics
#include <hxinc/kha/kore/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_Graphics2
#include <hxinc/kha/kore/graphics4/Graphics2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af8a22c1e264bd47_17_new,"kha.Image","new",0xf6cb14e3,"kha.Image.new","kha/Image.hx",17,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_74_initFromBytes,"kha.Image","initFromBytes",0x44a5dbb4,"kha.Image.initFromBytes","kha/Image.hx",74,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_87_initFromBytes3D,"kha.Image","initFromBytes3D",0x1e9b5d65,"kha.Image.initFromBytes3D","kha/Image.hx",87,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_100_initFromEncodedBytes,"kha.Image","initFromEncodedBytes",0x37b84bd4,"kha.Image.initFromEncodedBytes","kha/Image.hx",100,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_186_initRenderTarget,"kha.Image","initRenderTarget",0x9d84bc14,"kha.Image.initRenderTarget","kha/Image.hx",186,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_191_init,"kha.Image","init",0xf79fe92d,"kha.Image.init","kha/Image.hx",191,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_196_init3D,"kha.Image","init3D",0x0e4e7b1e,"kha.Image.init3D","kha/Image.hx",196,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_201_initVideo,"kha.Image","initVideo",0xf74c380e,"kha.Image.initVideo","kha/Image.hx",201,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_214_initFromFile,"kha.Image","initFromFile",0x76d9b753,"kha.Image.initFromFile","kha/Image.hx",214,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_220_get_g1,"kha.Image","get_g1",0x1a322090,"kha.Image.get_g1","kha/Image.hx",220,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_229_get_g2,"kha.Image","get_g2",0x1a322091,"kha.Image.get_g2","kha/Image.hx",229,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_238_get_g4,"kha.Image","get_g4",0x1a322093,"kha.Image.get_g4","kha/Image.hx",238,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_264_get_width,"kha.Image","get_width",0xb2ca1b20,"kha.Image.get_width","kha/Image.hx",264,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_269_get_height,"kha.Image","get_height",0x745d198d,"kha.Image.get_height","kha/Image.hx",269,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_274_get_depth,"kha.Image","get_depth",0xbf91561d,"kha.Image.get_depth","kha/Image.hx",274,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_282_get_realWidth,"kha.Image","get_realWidth",0xe70ddfe2,"kha.Image.get_realWidth","kha/Image.hx",282,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_287_get_realHeight,"kha.Image","get_realHeight",0xfb657e8b,"kha.Image.get_realHeight","kha/Image.hx",287,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_292_isOpaque,"kha.Image","isOpaque",0x56cdf908,"kha.Image.isOpaque","kha/Image.hx",292,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_297_atInternal,"kha.Image","atInternal",0xf54cc52d,"kha.Image.atInternal","kha/Image.hx",297,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_301_at,"kha.Image","at",0xf6c651d0,"kha.Image.at","kha/Image.hx",301,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_305_unload,"kha.Image","unload",0xdc8ed05c,"kha.Image.unload","kha/Image.hx",305,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_317_lock,"kha.Image","lock",0xf99c4a08,"kha.Image.lock","kha/Image.hx",317,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_347_unlock,"kha.Image","unlock",0xdc8ed221,"kha.Image.unlock","kha/Image.hx",347,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_365_getPixelsInternal,"kha.Image","getPixelsInternal",0x93a53a83,"kha.Image.getPixelsInternal","kha/Image.hx",365,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_369_getPixels,"kha.Image","getPixels",0xadbe8126,"kha.Image.getPixels","kha/Image.hx",369,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_386_generateMipmaps,"kha.Image","generateMipmaps",0x70db7039,"kha.Image.generateMipmaps","kha/Image.hx",386,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_390_setMipmaps,"kha.Image","setMipmaps",0x49bc7046,"kha.Image.setMipmaps","kha/Image.hx",390,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_398_setDepthStencilFrom,"kha.Image","setDepthStencilFrom",0x899de388,"kha.Image.setDepthStencilFrom","kha/Image.hx",398,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_402_clear,"kha.Image","clear",0x3e8f1cd0,"kha.Image.clear","kha/Image.hx",402,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_25_createFromVideo,"kha.Image","createFromVideo",0xac473518,"kha.Image.createFromVideo","kha/Image.hx",25,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_33_create,"kha.Image","create",0xf3119659,"kha.Image.create","kha/Image.hx",33,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_37_create3D,"kha.Image","create3D",0x0b66cb4a,"kha.Image.create3D","kha/Image.hx",37,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_41_createRenderTarget,"kha.Image","createRenderTarget",0x905b7b40,"kha.Image.createRenderTarget","kha/Image.hx",41,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_47_createArray,"kha.Image","createArray",0x25eea480,"kha.Image.createArray","kha/Image.hx",47,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_61_initArrayTexture,"kha.Image","initArrayTexture",0xf7821d0f,"kha.Image.initArrayTexture","kha/Image.hx",61,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_65_fromBytes,"kha.Image","fromBytes",0x16defb64,"kha.Image.fromBytes","kha/Image.hx",65,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_78_fromBytes3D,"kha.Image","fromBytes3D",0xc91fc915,"kha.Image.fromBytes3D","kha/Image.hx",78,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_91_fromEncodedBytes,"kha.Image","fromEncodedBytes",0x7d1f8224,"kha.Image.fromEncodedBytes","kha/Image.hx",91,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_109_getRenderTargetFormat,"kha.Image","getRenderTargetFormat",0x52514d57,"kha.Image.getRenderTargetFormat","kha/Image.hx",109,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_130_getDepthBufferBits,"kha.Image","getDepthBufferBits",0x8594c1f0,"kha.Image.getDepthBufferBits","kha/Image.hx",130,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_141_getStencilBufferBits,"kha.Image","getStencilBufferBits",0xca70a7e9,"kha.Image.getStencilBufferBits","kha/Image.hx",141,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_152_getTextureFormat,"kha.Image","getTextureFormat",0xaec6f199,"kha.Image.getTextureFormat","kha/Image.hx",152,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_169__create2,"kha.Image","_create2",0x2a958fd4,"kha.Image._create2","kha/Image.hx",169,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_178__create3,"kha.Image","_create3",0x2a958fd5,"kha.Image._create3","kha/Image.hx",178,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_205_fromFile,"kha.Image","fromFile",0x80fa1da3,"kha.Image.fromFile","kha/Image.hx",205,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_248_get_maxSize,"kha.Image","get_maxSize",0x2962591f,"kha.Image.get_maxSize","kha/Image.hx",248,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_255_get_nonPow2Supported,"kha.Image","get_nonPow2Supported",0xb7e34b0d,"kha.Image.get_nonPow2Supported","kha/Image.hx",255,0xc9b7c0ee)
HX_LOCAL_STACK_FRAME(_hx_pos_af8a22c1e264bd47_373_formatByteSize,"kha.Image","formatByteSize",0xcac13e9d,"kha.Image.formatByteSize","kha/Image.hx",373,0xc9b7c0ee)
namespace kha{

void Image_obj::__construct(bool readable){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_17_new)
HXLINE( 351)		this->pixelsAllocated = false;
HXLINE( 350)		this->pixels = null();
HXLINE( 309)		this->bytes = null();
HXLINE( 105)		this->readable = readable;
            	}

Dynamic Image_obj::__CreateEmpty() { return new Image_obj; }

void *Image_obj::_hx_vtable = 0;

Dynamic Image_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Image_obj > _hx_result = new Image_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Image_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x01584a3b;
}

static ::kha::Canvas_obj _hx_kha_Image__hx_kha_Canvas= {
	( ::Dynamic (hx::Object::*)())&::kha::Image_obj::get_g4,
	(  ::kha::graphics2::Graphics (hx::Object::*)())&::kha::Image_obj::get_g2,
	( ::Dynamic (hx::Object::*)())&::kha::Image_obj::get_g1,
	( int (hx::Object::*)())&::kha::Image_obj::get_height,
	( int (hx::Object::*)())&::kha::Image_obj::get_width,
};

static ::kha::Resource_obj _hx_kha_Image__hx_kha_Resource= {
	( void (hx::Object::*)())&::kha::Image_obj::unload,
};

void *Image_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x36d1dbdc: return &_hx_kha_Image__hx_kha_Canvas;
		case (int)0xf962acd2: return &_hx_kha_Image__hx_kha_Resource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Image_obj::initFromBytes(::Array< unsigned char > bytes,int width,int height,int format){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_74_initFromBytes)
            	texture = new Kore::Graphics4::Texture(bytes.GetPtr()->GetBase(), width, height, format, readable);

            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,initFromBytes,(void))

void Image_obj::initFromBytes3D(::Array< unsigned char > bytes,int width,int height,int depth,int format){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_87_initFromBytes3D)
            	texture = new Kore::Graphics4::Texture(bytes.GetPtr()->GetBase(), width, height, depth, format, readable);

            	}


HX_DEFINE_DYNAMIC_FUNC5(Image_obj,initFromBytes3D,(void))

void Image_obj::initFromEncodedBytes(::Array< unsigned char > bytes,::String format){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_100_initFromEncodedBytes)
            	texture = new Kore::Graphics4::Texture(bytes.GetPtr()->GetBase(), bytes.GetPtr()->length, format.c_str(), readable);

            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,initFromEncodedBytes,(void))

void Image_obj::initRenderTarget(int width,int height,int depthBufferBits,bool antiAliasing,int format,int stencilBufferBits,int contextId){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_186_initRenderTarget)
            	renderTarget = new Kore::Graphics4::RenderTarget(width, height, depthBufferBits, antiAliasing, (Kore::Graphics4::RenderTargetFormat)format, stencilBufferBits, contextId); texture = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC7(Image_obj,initRenderTarget,(void))

void Image_obj::init(int width,int height,int format){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_191_init)
            	texture = new Kore::Graphics4::Texture(width, height, (Kore::Graphics4::Image::Format)format, readable); renderTarget = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC3(Image_obj,init,(void))

void Image_obj::init3D(int width,int height,int depth,int format){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_196_init3D)
            	texture = new Kore::Graphics4::Texture(width, height, depth, (Kore::Graphics4::Image::Format)format, readable); renderTarget = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC4(Image_obj,init3D,(void))

void Image_obj::initVideo( ::kha::kore::Video video){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_201_initVideo)
            	texture = video->video->currentImage(); renderTarget = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,initVideo,(void))

void Image_obj::initFromFile(::String filename){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_214_initFromFile)
            	texture = new Kore::Graphics4::Texture(filename.c_str(), readable);

            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,initFromFile,(void))

::Dynamic Image_obj::get_g1(){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_220_get_g1)
HXLINE( 221)		if (hx::IsNull( this->graphics1 )) {
HXLINE( 222)			this->graphics1 =  ::kha::graphics2::Graphics1_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 224)		return this->graphics1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_g1,return )

 ::kha::graphics2::Graphics Image_obj::get_g2(){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_229_get_g2)
HXLINE( 230)		if (hx::IsNull( this->graphics2 )) {
HXLINE( 231)			this->graphics2 =  ::kha::kore::graphics4::Graphics2_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 233)		return this->graphics2;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_g2,return )

::Dynamic Image_obj::get_g4(){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_238_get_g4)
HXLINE( 239)		if (hx::IsNull( this->graphics4 )) {
HXLINE( 240)			this->graphics4 =  ::kha::kore::graphics4::Graphics_obj::__alloc( HX_CTX ,hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE( 242)		return this->graphics4;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_g4,return )

int Image_obj::get_width(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_264_get_width)
            	if (texture != nullptr) return texture->width; else return renderTarget->width;

HXDLIN( 264)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_width,return )

int Image_obj::get_height(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_269_get_height)
            	if (texture != nullptr) return texture->height; else return renderTarget->height;

HXDLIN( 269)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_height,return )

int Image_obj::get_depth(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_274_get_depth)
            	if (texture != nullptr) return texture->depth; else return 0;

HXDLIN( 274)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_depth,return )

int Image_obj::get_realWidth(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_282_get_realWidth)
            	if (texture != nullptr) return texture->texWidth; else return renderTarget->texWidth;

HXDLIN( 282)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_realWidth,return )

int Image_obj::get_realHeight(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_287_get_realHeight)
            	if (texture != nullptr) return texture->texHeight; else return renderTarget->texHeight;

HXDLIN( 287)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_realHeight,return )

bool Image_obj::isOpaque(int x,int y){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_292_isOpaque)
            	return (texture->at(x, y) & 0xff) != 0;

HXDLIN( 292)		return true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,isOpaque,return )

int Image_obj::atInternal(int x,int y){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_297_atInternal)
            	return texture->at(x, y);

HXDLIN( 297)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,atInternal,return )

int Image_obj::at(int x,int y){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_301_at)
HXDLIN( 301)		return ::kha::_Color::Color_Impl__obj::_new(this->atInternal(x,y));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Image_obj,at,return )

void Image_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_305_unload)
            	delete texture; texture = nullptr; delete renderTarget; renderTarget = nullptr; delete textureArray; textureArray = nullptr; delete[] textureArrayTextures; textureArrayTextures = nullptr;

            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,unload,(void))

 ::haxe::io::Bytes Image_obj::lock(hx::Null< int >  __o_level){
            		int level = __o_level.Default(0);
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_317_lock)
            	
		int size = texture-> sizeOf(texture->format) * texture->width * texture->height;
		this->bytes = ::haxe::io::Bytes_obj::alloc(size);
		return this->bytes;
	

HXDLIN( 317)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,lock,return )

void Image_obj::unlock(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_347_unlock)
            	
		Kore::u8* b = bytes->b->Pointer();
		Kore::u8* tex = texture->lock();
		int size = texture->sizeOf(texture->format);
		int stride = texture->stride();
		for (int y = 0; y < texture->height; ++y) {
			for (int x = 0; x < texture->width; ++x) {
#ifdef KORE_DIRECT3D
				if (texture->format == Kore::Graphics4::Image::RGBA32) {
					//RBGA->BGRA
					tex[y * stride + x * size + 0] = b[(y * texture->width + x) * size + 2];
					tex[y * stride + x * size + 1] = b[(y * texture->width + x) * size + 1];
					tex[y * stride + x * size + 2] = b[(y * texture->width + x) * size + 0];
					tex[y * stride + x * size + 3] = b[(y * texture->width + x) * size + 3];
				}
				else
#endif
				{
					for (int i = 0; i < size; ++i) {
						tex[y * stride + x * size + i] = b[(y * texture->width + x) * size + i];
					}
				}
			}
		}
		texture->unlock();
	

HXDLIN( 347)		this->bytes = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,unlock,(void))

 ::haxe::io::Bytes Image_obj::getPixelsInternal(int formatSize){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_365_getPixelsInternal)
            	
		if (renderTarget == nullptr) return nullptr;
		if (!this->pixelsAllocated) {
			int size = formatSize * renderTarget->width * renderTarget->height;
			this->pixels = ::haxe::io::Bytes_obj::alloc(size);
			this->pixelsAllocated = true;
		}
		Kore::u8* b = this->pixels->b->Pointer();
		renderTarget->getPixels(b);
		return this->pixels;
	

HXDLIN( 365)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,getPixelsInternal,return )

 ::haxe::io::Bytes Image_obj::getPixels(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_369_getPixels)
HXDLIN( 369)		return this->getPixelsInternal(::kha::Image_obj::formatByteSize(this->format));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Image_obj,getPixels,return )

void Image_obj::generateMipmaps(int levels){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_386_generateMipmaps)
HXDLIN( 386)		texture != nullptr ? texture->generateMipmaps(levels) : renderTarget->generateMipmaps(levels);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,generateMipmaps,(void))

void Image_obj::setMipmaps(::Array< ::Dynamic> mipmaps){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_390_setMipmaps)
HXDLIN( 390)		int _g = 0;
HXDLIN( 390)		int _g1 = mipmaps->length;
HXDLIN( 390)		while((_g < _g1)){
HXDLIN( 390)			_g = (_g + 1);
HXDLIN( 390)			int i = (_g - 1);
HXLINE( 391)			 ::kha::Image image = mipmaps->__get(i).StaticCast<  ::kha::Image >();
HXLINE( 392)			int level = (i + 1);
HXLINE( 393)			texture->setMipmap(image->texture, level);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,setMipmaps,(void))

void Image_obj::setDepthStencilFrom( ::kha::Image image){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_398_setDepthStencilFrom)
HXDLIN( 398)		renderTarget->setDepthStencilFrom(image->renderTarget);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Image_obj,setDepthStencilFrom,(void))

void Image_obj::clear(int x,int y,int z,int width,int height,int depth,int color){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_402_clear)
            	if (texture != nullptr) texture->clear(x, y, z, width, height, depth, color);

            	}


HX_DEFINE_DYNAMIC_FUNC7(Image_obj,clear,(void))

 ::kha::Image Image_obj::createFromVideo( ::kha::Video video){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_25_createFromVideo)
HXLINE(  26)		 ::kha::Image image =  ::kha::Image_obj::__alloc( HX_CTX ,false);
HXLINE(  27)		image->format = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
HXLINE(  28)		image->initVideo(hx::TCast<  ::kha::kore::Video >::cast(video));
HXLINE(  29)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,createFromVideo,return )

 ::kha::Image Image_obj::create(int width,int height, ::kha::graphics4::TextureFormat format, ::kha::graphics4::Usage usage){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_33_create)
HXDLIN(  33)		 ::kha::graphics4::TextureFormat _hx_tmp;
HXDLIN(  33)		if (hx::IsNull( format )) {
HXDLIN(  33)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
            		else {
HXDLIN(  33)			_hx_tmp = format;
            		}
HXDLIN(  33)		return ::kha::Image_obj::_create2(width,height,_hx_tmp,false,false,0,false,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Image_obj,create,return )

 ::kha::Image Image_obj::create3D(int width,int height,int depth, ::kha::graphics4::TextureFormat format, ::kha::graphics4::Usage usage){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_37_create3D)
HXDLIN(  37)		 ::kha::graphics4::TextureFormat _hx_tmp;
HXDLIN(  37)		if (hx::IsNull( format )) {
HXDLIN(  37)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
            		else {
HXDLIN(  37)			_hx_tmp = format;
            		}
HXDLIN(  37)		return ::kha::Image_obj::_create3(width,height,depth,_hx_tmp,false,0);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Image_obj,create3D,return )

 ::kha::Image Image_obj::createRenderTarget(int width,int height, ::kha::graphics4::TextureFormat format,hx::Null< int >  __o_depthStencil,hx::Null< int >  __o_antiAliasingSamples,hx::Null< int >  __o_contextId){
            		int depthStencil = __o_depthStencil.Default(0);
            		int antiAliasingSamples = __o_antiAliasingSamples.Default(1);
            		int contextId = __o_contextId.Default(0);
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_41_createRenderTarget)
HXDLIN(  41)		 ::kha::graphics4::TextureFormat _hx_tmp;
HXDLIN(  41)		if (hx::IsNull( format )) {
HXDLIN(  41)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
            		else {
HXDLIN(  41)			_hx_tmp = format;
            		}
HXDLIN(  41)		return ::kha::Image_obj::_create2(width,height,_hx_tmp,false,true,depthStencil,(antiAliasingSamples > 1),contextId);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_obj,createRenderTarget,return )

 ::kha::Image Image_obj::createArray(::Array< ::Dynamic> images, ::kha::graphics4::TextureFormat format){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_47_createArray)
HXLINE(  48)		 ::kha::Image image =  ::kha::Image_obj::__alloc( HX_CTX ,false);
HXLINE(  49)		 ::kha::graphics4::TextureFormat _hx_tmp;
HXDLIN(  49)		if (hx::IsNull( format )) {
HXLINE(  49)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
            		else {
HXLINE(  49)			_hx_tmp = format;
            		}
HXDLIN(  49)		image->format = _hx_tmp;
HXLINE(  50)		::kha::Image_obj::initArrayTexture(image,images);
HXLINE(  51)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,createArray,return )

void Image_obj::initArrayTexture( ::kha::Image source,::Array< ::Dynamic> images){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_61_initArrayTexture)
            	
		source->textureArrayTextures = new Kore::Graphics4::Image*[images->length];
		for (unsigned i = 0; i < images->length; ++i) {
			source->textureArrayTextures[i] = images->__get(i).StaticCast<  ::kha::Image >()->texture;
		}
		source->textureArray = new Kore::Graphics4::TextureArray(source->textureArrayTextures, images->length);
	

            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,initArrayTexture,(void))

 ::kha::Image Image_obj::fromBytes( ::haxe::io::Bytes bytes,int width,int height, ::kha::graphics4::TextureFormat format, ::kha::graphics4::Usage usage){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_65_fromBytes)
HXLINE(  66)		bool readable = true;
HXLINE(  67)		 ::kha::Image image =  ::kha::Image_obj::__alloc( HX_CTX ,readable);
HXLINE(  68)		image->format = format;
HXLINE(  69)		::Array< unsigned char > bytes1 = bytes->b;
HXDLIN(  69)		image->initFromBytes(bytes1,width,height,::kha::Image_obj::getTextureFormat(format));
HXLINE(  70)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Image_obj,fromBytes,return )

 ::kha::Image Image_obj::fromBytes3D( ::haxe::io::Bytes bytes,int width,int height,int depth, ::kha::graphics4::TextureFormat format, ::kha::graphics4::Usage usage){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_78_fromBytes3D)
HXLINE(  79)		bool readable = true;
HXLINE(  80)		 ::kha::Image image =  ::kha::Image_obj::__alloc( HX_CTX ,readable);
HXLINE(  81)		image->format = format;
HXLINE(  82)		::Array< unsigned char > bytes1 = bytes->b;
HXDLIN(  82)		image->initFromBytes3D(bytes1,width,height,depth,::kha::Image_obj::getTextureFormat(format));
HXLINE(  83)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_obj,fromBytes3D,return )

void Image_obj::fromEncodedBytes( ::haxe::io::Bytes bytes,::String format, ::Dynamic doneCallback, ::Dynamic errorCallback,hx::Null< bool >  __o_readable){
            		bool readable = __o_readable.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_91_fromEncodedBytes)
HXLINE(  92)		 ::kha::Image image =  ::kha::Image_obj::__alloc( HX_CTX ,readable);
HXLINE(  93)		bool isFloat;
HXDLIN(  93)		if ((format != HX_("hdr",f6,41,4f,00))) {
HXLINE(  93)			isFloat = (format == HX_("HDR",d6,dd,36,00));
            		}
            		else {
HXLINE(  93)			isFloat = true;
            		}
HXLINE(  94)		 ::kha::graphics4::TextureFormat _hx_tmp;
HXDLIN(  94)		if (isFloat) {
HXLINE(  94)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
            		}
            		else {
HXLINE(  94)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
HXDLIN(  94)		image->format = _hx_tmp;
HXLINE(  95)		image->initFromEncodedBytes(bytes->b,format);
HXLINE(  96)		doneCallback(image);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC5(Image_obj,fromEncodedBytes,(void))

int Image_obj::getRenderTargetFormat( ::kha::graphics4::TextureFormat format){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_109_getRenderTargetFormat)
HXDLIN( 109)		switch((int)(format->_hx_getIndex())){
            			case (int)0: {
HXLINE( 111)				return 0;
            			}
            			break;
            			case (int)1: {
HXLINE( 121)				return 5;
            			}
            			break;
            			case (int)2: {
HXLINE( 117)				return 3;
            			}
            			break;
            			case (int)3: {
HXLINE( 119)				return 4;
            			}
            			break;
            			case (int)4: {
HXLINE( 113)				return 1;
            			}
            			break;
            			case (int)5: {
HXLINE( 115)				return 2;
            			}
            			break;
            			case (int)6: {
HXLINE( 123)				return 6;
            			}
            			break;
            		}
HXLINE( 109)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,getRenderTargetFormat,return )

int Image_obj::getDepthBufferBits(int depthAndStencil){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_130_getDepthBufferBits)
HXDLIN( 130)		switch((int)(depthAndStencil)){
            			case (int)0: {
HXLINE( 131)				return -1;
            			}
            			break;
            			case (int)1: {
HXLINE( 132)				return 24;
            			}
            			break;
            			case (int)2: {
HXLINE( 133)				return 24;
            			}
            			break;
            			case (int)3: {
HXLINE( 134)				return 24;
            			}
            			break;
            			case (int)4: {
HXLINE( 135)				return 32;
            			}
            			break;
            			case (int)5: {
HXLINE( 136)				return 16;
            			}
            			break;
            		}
HXLINE( 130)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,getDepthBufferBits,return )

int Image_obj::getStencilBufferBits(int depthAndStencil){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_141_getStencilBufferBits)
HXDLIN( 141)		switch((int)(depthAndStencil)){
            			case (int)0: {
HXLINE( 142)				return -1;
            			}
            			break;
            			case (int)1: {
HXLINE( 143)				return -1;
            			}
            			break;
            			case (int)2: {
HXLINE( 144)				return 8;
            			}
            			break;
            			case (int)3: {
HXLINE( 145)				return 8;
            			}
            			break;
            			case (int)4: {
HXLINE( 146)				return 8;
            			}
            			break;
            			case (int)5: {
HXLINE( 147)				return 0;
            			}
            			break;
            		}
HXLINE( 141)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,getStencilBufferBits,return )

int Image_obj::getTextureFormat( ::kha::graphics4::TextureFormat format){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_152_getTextureFormat)
HXDLIN( 152)		switch((int)(format->_hx_getIndex())){
            			case (int)0: {
HXLINE( 154)				return 0;
            			}
            			break;
            			case (int)2: {
HXLINE( 156)				return 3;
            			}
            			break;
            			case (int)4: {
HXLINE( 158)				return 4;
            			}
            			break;
            			case (int)5: {
HXLINE( 160)				return 5;
            			}
            			break;
            			case (int)6: {
HXLINE( 162)				return 7;
            			}
            			break;
            			default:{
HXLINE( 164)				return 1;
            			}
            		}
HXLINE( 152)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,getTextureFormat,return )

 ::kha::Image Image_obj::_create2(int width,int height, ::kha::graphics4::TextureFormat format,bool readable,bool renderTarget,int depthStencil,bool antiAliasing,int contextId){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_169__create2)
HXLINE( 170)		 ::kha::Image image =  ::kha::Image_obj::__alloc( HX_CTX ,readable);
HXLINE( 171)		image->format = format;
HXLINE( 172)		if (renderTarget) {
HXLINE( 172)			int _hx_tmp = ::kha::Image_obj::getDepthBufferBits(depthStencil);
HXDLIN( 172)			int _hx_tmp1 = ::kha::Image_obj::getRenderTargetFormat(format);
HXDLIN( 172)			image->initRenderTarget(width,height,_hx_tmp,antiAliasing,_hx_tmp1,::kha::Image_obj::getStencilBufferBits(depthStencil),contextId);
            		}
            		else {
HXLINE( 173)			image->init(width,height,::kha::Image_obj::getTextureFormat(format));
            		}
HXLINE( 174)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC8(Image_obj,_create2,return )

 ::kha::Image Image_obj::_create3(int width,int height,int depth, ::kha::graphics4::TextureFormat format,bool readable,int contextId){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_178__create3)
HXLINE( 179)		 ::kha::Image image =  ::kha::Image_obj::__alloc( HX_CTX ,readable);
HXLINE( 180)		image->format = format;
HXLINE( 181)		image->init3D(width,height,depth,::kha::Image_obj::getTextureFormat(format));
HXLINE( 182)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC6(Image_obj,_create3,return )

 ::kha::Image Image_obj::fromFile(::String filename,bool readable){
            	HX_GC_STACKFRAME(&_hx_pos_af8a22c1e264bd47_205_fromFile)
HXLINE( 206)		 ::kha::Image image =  ::kha::Image_obj::__alloc( HX_CTX ,readable);
HXLINE( 207)		bool isFloat = ::StringTools_obj::endsWith(filename,HX_(".hdr",88,12,b7,1e));
HXLINE( 208)		 ::kha::graphics4::TextureFormat _hx_tmp;
HXDLIN( 208)		if (isFloat) {
HXLINE( 208)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA128_dyn();
            		}
            		else {
HXLINE( 208)			_hx_tmp = ::kha::graphics4::TextureFormat_obj::RGBA32_dyn();
            		}
HXDLIN( 208)		image->format = _hx_tmp;
HXLINE( 209)		image->initFromFile(filename);
HXLINE( 210)		return image;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Image_obj,fromFile,return )

int Image_obj::maxSize;

int Image_obj::get_maxSize(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_248_get_maxSize)
HXDLIN( 248)		return 4096;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_maxSize,return )

bool Image_obj::nonPow2Supported;

bool Image_obj::get_nonPow2Supported(){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_255_get_nonPow2Supported)
            	return Kore::Graphics4::nonPow2TexturesSupported();

HXDLIN( 255)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Image_obj,get_nonPow2Supported,return )

int Image_obj::formatByteSize( ::kha::graphics4::TextureFormat format){
            	HX_STACKFRAME(&_hx_pos_af8a22c1e264bd47_373_formatByteSize)
HXDLIN( 373)		switch((int)(format->_hx_getIndex())){
            			case (int)0: {
HXLINE( 374)				return 4;
            			}
            			break;
            			case (int)1: {
HXLINE( 375)				return 1;
            			}
            			break;
            			case (int)2: {
HXLINE( 376)				return 16;
            			}
            			break;
            			case (int)3: {
HXLINE( 377)				return 2;
            			}
            			break;
            			case (int)4: {
HXLINE( 378)				return 8;
            			}
            			break;
            			case (int)5: {
HXLINE( 379)				return 4;
            			}
            			break;
            			case (int)6: {
HXLINE( 380)				return 2;
            			}
            			break;
            		}
HXLINE( 373)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Image_obj,formatByteSize,return )


hx::ObjectPtr< Image_obj > Image_obj::__new(bool readable) {
	hx::ObjectPtr< Image_obj > __this = new Image_obj();
	__this->__construct(readable);
	return __this;
}

hx::ObjectPtr< Image_obj > Image_obj::__alloc(hx::Ctx *_hx_ctx,bool readable) {
	Image_obj *__this = (Image_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Image_obj), true, "kha.Image"));
	*(void **)__this = Image_obj::_hx_vtable;
	__this->__construct(readable);
	return __this;
}

Image_obj::Image_obj()
{
}

void Image_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Image);
	HX_MARK_MEMBER_NAME(format,"format");
	HX_MARK_MEMBER_NAME(readable,"readable");
	HX_MARK_MEMBER_NAME(graphics1,"graphics1");
	HX_MARK_MEMBER_NAME(graphics2,"graphics2");
	HX_MARK_MEMBER_NAME(graphics4,"graphics4");
	HX_MARK_MEMBER_NAME(g1,"g1");
	HX_MARK_MEMBER_NAME(g2,"g2");
	HX_MARK_MEMBER_NAME(g4,"g4");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(depth,"depth");
	HX_MARK_MEMBER_NAME(realWidth,"realWidth");
	HX_MARK_MEMBER_NAME(realHeight,"realHeight");
	HX_MARK_MEMBER_NAME(bytes,"bytes");
	HX_MARK_MEMBER_NAME(pixels,"pixels");
	HX_MARK_MEMBER_NAME(pixelsAllocated,"pixelsAllocated");
	HX_MARK_END_CLASS();
}

void Image_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(format,"format");
	HX_VISIT_MEMBER_NAME(readable,"readable");
	HX_VISIT_MEMBER_NAME(graphics1,"graphics1");
	HX_VISIT_MEMBER_NAME(graphics2,"graphics2");
	HX_VISIT_MEMBER_NAME(graphics4,"graphics4");
	HX_VISIT_MEMBER_NAME(g1,"g1");
	HX_VISIT_MEMBER_NAME(g2,"g2");
	HX_VISIT_MEMBER_NAME(g4,"g4");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(depth,"depth");
	HX_VISIT_MEMBER_NAME(realWidth,"realWidth");
	HX_VISIT_MEMBER_NAME(realHeight,"realHeight");
	HX_VISIT_MEMBER_NAME(bytes,"bytes");
	HX_VISIT_MEMBER_NAME(pixels,"pixels");
	HX_VISIT_MEMBER_NAME(pixelsAllocated,"pixelsAllocated");
}

hx::Val Image_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"g1") ) { return hx::Val( inCallProp == hx::paccAlways ? get_g1() : g1 ); }
		if (HX_FIELD_EQ(inName,"g2") ) { return hx::Val( inCallProp == hx::paccAlways ? get_g2() : g2 ); }
		if (HX_FIELD_EQ(inName,"g4") ) { return hx::Val( inCallProp == hx::paccAlways ? get_g4() : g4 ); }
		if (HX_FIELD_EQ(inName,"at") ) { return hx::Val( at_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		if (HX_FIELD_EQ(inName,"lock") ) { return hx::Val( lock_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return hx::Val( inCallProp == hx::paccAlways ? get_width() : width ); }
		if (HX_FIELD_EQ(inName,"depth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_depth() : depth ); }
		if (HX_FIELD_EQ(inName,"bytes") ) { return hx::Val( bytes ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { return hx::Val( format ); }
		if (HX_FIELD_EQ(inName,"init3D") ) { return hx::Val( init3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_g1") ) { return hx::Val( get_g1_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_g2") ) { return hx::Val( get_g2_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_g4") ) { return hx::Val( get_g4_dyn() ); }
		if (HX_FIELD_EQ(inName,"height") ) { return hx::Val( inCallProp == hx::paccAlways ? get_height() : height ); }
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		if (HX_FIELD_EQ(inName,"unlock") ) { return hx::Val( unlock_dyn() ); }
		if (HX_FIELD_EQ(inName,"pixels") ) { return hx::Val( pixels ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { return hx::Val( readable ); }
		if (HX_FIELD_EQ(inName,"isOpaque") ) { return hx::Val( isOpaque_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"graphics1") ) { return hx::Val( graphics1 ); }
		if (HX_FIELD_EQ(inName,"graphics2") ) { return hx::Val( graphics2 ); }
		if (HX_FIELD_EQ(inName,"graphics4") ) { return hx::Val( graphics4 ); }
		if (HX_FIELD_EQ(inName,"initVideo") ) { return hx::Val( initVideo_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_width") ) { return hx::Val( get_width_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_depth") ) { return hx::Val( get_depth_dyn() ); }
		if (HX_FIELD_EQ(inName,"realWidth") ) { return hx::Val( inCallProp == hx::paccAlways ? get_realWidth() : realWidth ); }
		if (HX_FIELD_EQ(inName,"getPixels") ) { return hx::Val( getPixels_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_height") ) { return hx::Val( get_height_dyn() ); }
		if (HX_FIELD_EQ(inName,"realHeight") ) { return hx::Val( inCallProp == hx::paccAlways ? get_realHeight() : realHeight ); }
		if (HX_FIELD_EQ(inName,"atInternal") ) { return hx::Val( atInternal_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMipmaps") ) { return hx::Val( setMipmaps_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"initFromFile") ) { return hx::Val( initFromFile_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"initFromBytes") ) { return hx::Val( initFromBytes_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_realWidth") ) { return hx::Val( get_realWidth_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"get_realHeight") ) { return hx::Val( get_realHeight_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"initFromBytes3D") ) { return hx::Val( initFromBytes3D_dyn() ); }
		if (HX_FIELD_EQ(inName,"pixelsAllocated") ) { return hx::Val( pixelsAllocated ); }
		if (HX_FIELD_EQ(inName,"generateMipmaps") ) { return hx::Val( generateMipmaps_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"initRenderTarget") ) { return hx::Val( initRenderTarget_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"getPixelsInternal") ) { return hx::Val( getPixelsInternal_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"setDepthStencilFrom") ) { return hx::Val( setDepthStencilFrom_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"initFromEncodedBytes") ) { return hx::Val( initFromEncodedBytes_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Image_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"maxSize") ) { outValue = ( inCallProp == hx::paccAlways ? get_maxSize() : maxSize ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"create3D") ) { outValue = create3D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_create2") ) { outValue = _create2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_create3") ) { outValue = _create3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromFile") ) { outValue = fromFile_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromBytes") ) { outValue = fromBytes_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createArray") ) { outValue = createArray_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromBytes3D") ) { outValue = fromBytes3D_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_maxSize") ) { outValue = get_maxSize_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"formatByteSize") ) { outValue = formatByteSize_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"createFromVideo") ) { outValue = createFromVideo_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"initArrayTexture") ) { outValue = initArrayTexture_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromEncodedBytes") ) { outValue = fromEncodedBytes_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getTextureFormat") ) { outValue = getTextureFormat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"nonPow2Supported") ) { outValue = ( inCallProp == hx::paccAlways ? get_nonPow2Supported() : nonPow2Supported ); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createRenderTarget") ) { outValue = createRenderTarget_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"getDepthBufferBits") ) { outValue = getDepthBufferBits_dyn(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"getStencilBufferBits") ) { outValue = getStencilBufferBits_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"get_nonPow2Supported") ) { outValue = get_nonPow2Supported_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"getRenderTargetFormat") ) { outValue = getRenderTargetFormat_dyn(); return true; }
	}
	return false;
}

hx::Val Image_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"g1") ) { g1=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g2") ) { g2=inValue.Cast<  ::kha::graphics2::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"g4") ) { g4=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"depth") ) { depth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bytes") ) { bytes=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"format") ) { format=inValue.Cast<  ::kha::graphics4::TextureFormat >(); return inValue; }
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pixels") ) { pixels=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"readable") ) { readable=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"graphics1") ) { graphics1=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"graphics2") ) { graphics2=inValue.Cast<  ::kha::graphics2::Graphics >(); return inValue; }
		if (HX_FIELD_EQ(inName,"graphics4") ) { graphics4=inValue.Cast< ::Dynamic >(); return inValue; }
		if (HX_FIELD_EQ(inName,"realWidth") ) { realWidth=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"realHeight") ) { realHeight=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"pixelsAllocated") ) { pixelsAllocated=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Image_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"maxSize") ) { maxSize=ioValue.Cast< int >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"nonPow2Supported") ) { nonPow2Supported=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Image_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("format",37,8f,8e,fd));
	outFields->push(HX_("readable",f0,1b,87,7d));
	outFields->push(HX_("graphics1",06,b9,91,08));
	outFields->push(HX_("graphics2",07,b9,91,08));
	outFields->push(HX_("graphics4",09,b9,91,08));
	outFields->push(HX_("g1",ea,59,00,00));
	outFields->push(HX_("g2",eb,59,00,00));
	outFields->push(HX_("g4",ed,59,00,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("depth",03,f1,29,d7));
	outFields->push(HX_("realWidth",c8,e5,24,ce));
	outFields->push(HX_("realHeight",e5,a1,73,48));
	outFields->push(HX_("bytes",6b,08,98,bd));
	outFields->push(HX_("pixels",2d,ef,a9,8c));
	outFields->push(HX_("pixelsAllocated",1a,b6,97,47));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Image_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::graphics4::TextureFormat */ ,(int)offsetof(Image_obj,format),HX_("format",37,8f,8e,fd)},
	{hx::fsBool,(int)offsetof(Image_obj,readable),HX_("readable",f0,1b,87,7d)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(Image_obj,graphics1),HX_("graphics1",06,b9,91,08)},
	{hx::fsObject /*  ::kha::graphics2::Graphics */ ,(int)offsetof(Image_obj,graphics2),HX_("graphics2",07,b9,91,08)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(Image_obj,graphics4),HX_("graphics4",09,b9,91,08)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(Image_obj,g1),HX_("g1",ea,59,00,00)},
	{hx::fsObject /*  ::kha::graphics2::Graphics */ ,(int)offsetof(Image_obj,g2),HX_("g2",eb,59,00,00)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(Image_obj,g4),HX_("g4",ed,59,00,00)},
	{hx::fsInt,(int)offsetof(Image_obj,width),HX_("width",06,b6,62,ca)},
	{hx::fsInt,(int)offsetof(Image_obj,height),HX_("height",e7,07,4c,02)},
	{hx::fsInt,(int)offsetof(Image_obj,depth),HX_("depth",03,f1,29,d7)},
	{hx::fsInt,(int)offsetof(Image_obj,realWidth),HX_("realWidth",c8,e5,24,ce)},
	{hx::fsInt,(int)offsetof(Image_obj,realHeight),HX_("realHeight",e5,a1,73,48)},
	{hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Image_obj,bytes),HX_("bytes",6b,08,98,bd)},
	{hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Image_obj,pixels),HX_("pixels",2d,ef,a9,8c)},
	{hx::fsBool,(int)offsetof(Image_obj,pixelsAllocated),HX_("pixelsAllocated",1a,b6,97,47)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Image_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &Image_obj::maxSize,HX_("maxSize",85,f9,83,cc)},
	{hx::fsBool,(void *) &Image_obj::nonPow2Supported,HX_("nonPow2Supported",e7,6d,39,51)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Image_obj_sMemberFields[] = {
	HX_("format",37,8f,8e,fd),
	HX_("readable",f0,1b,87,7d),
	HX_("graphics1",06,b9,91,08),
	HX_("graphics2",07,b9,91,08),
	HX_("graphics4",09,b9,91,08),
	HX_("initFromBytes",71,b5,20,ed),
	HX_("initFromBytes3D",62,e0,cd,fe),
	HX_("initFromEncodedBytes",b7,d3,78,ef),
	HX_("initRenderTarget",77,d6,84,e9),
	HX_("init",10,3b,bb,45),
	HX_("init3D",c1,4b,4c,97),
	HX_("initVideo",4b,2f,8e,52),
	HX_("initFromFile",36,24,3e,46),
	HX_("g1",ea,59,00,00),
	HX_("get_g1",33,f1,2f,a3),
	HX_("g2",eb,59,00,00),
	HX_("get_g2",34,f1,2f,a3),
	HX_("g4",ed,59,00,00),
	HX_("get_g4",36,f1,2f,a3),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("depth",03,f1,29,d7),
	HX_("get_width",5d,12,0c,0e),
	HX_("get_height",b0,77,d3,f2),
	HX_("get_depth",5a,4d,d3,1a),
	HX_("realWidth",c8,e5,24,ce),
	HX_("realHeight",e5,a1,73,48),
	HX_("get_realWidth",9f,b9,88,8f),
	HX_("get_realHeight",2e,2a,69,be),
	HX_("isOpaque",6b,78,5b,77),
	HX_("atInternal",50,23,c3,73),
	HX_("at",f3,54,00,00),
	HX_("unload",ff,a0,8c,65),
	HX_("bytes",6b,08,98,bd),
	HX_("lock",eb,9b,b7,47),
	HX_("unlock",c4,a2,8c,65),
	HX_("pixels",2d,ef,a9,8c),
	HX_("pixelsAllocated",1a,b6,97,47),
	HX_("getPixelsInternal",c0,36,bc,c7),
	HX_("getPixels",63,78,00,09),
	HX_("generateMipmaps",36,f3,0d,51),
	HX_("setMipmaps",69,ce,32,c8),
	HX_("setDepthStencilFrom",05,29,9a,2e),
	HX_("clear",8d,71,5b,48),
	::String(null()) };

static void Image_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Image_obj::maxSize,"maxSize");
	HX_MARK_MEMBER_NAME(Image_obj::nonPow2Supported,"nonPow2Supported");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Image_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Image_obj::maxSize,"maxSize");
	HX_VISIT_MEMBER_NAME(Image_obj::nonPow2Supported,"nonPow2Supported");
};

#endif

hx::Class Image_obj::__mClass;

static ::String Image_obj_sStaticFields[] = {
	HX_("createFromVideo",15,b8,79,8c),
	HX_("create",fc,66,0f,7c),
	HX_("create3D",ad,4a,f4,2b),
	HX_("createRenderTarget",63,34,61,f0),
	HX_("createArray",fd,a4,0a,4f),
	HX_("initArrayTexture",72,37,82,43),
	HX_("fromBytes",a1,f2,20,72),
	HX_("fromBytes3D",92,c9,3b,f2),
	HX_("fromEncodedBytes",87,9c,1f,c9),
	HX_("getRenderTargetFormat",14,ac,07,63),
	HX_("getDepthBufferBits",13,7b,9a,e5),
	HX_("getStencilBufferBits",cc,2f,31,82),
	HX_("getTextureFormat",fc,0b,c7,fa),
	HX_("_create2",37,0f,23,4b),
	HX_("_create3",38,0f,23,4b),
	HX_("fromFile",06,9d,87,a1),
	HX_("maxSize",85,f9,83,cc),
	HX_("get_maxSize",9c,59,7e,52),
	HX_("nonPow2Supported",e7,6d,39,51),
	HX_("get_nonPow2Supported",f0,d2,a3,6f),
	HX_("formatByteSize",40,ea,c4,8d),
	::String(null())
};

void Image_obj::__register()
{
	Image_obj _hx_dummy;
	Image_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.Image",71,67,08,de);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Image_obj::__GetStatic;
	__mClass->mSetStaticField = &Image_obj::__SetStatic;
	__mClass->mMarkFunc = Image_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Image_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Image_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Image_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Image_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Image_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Image_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
