// Generated by Haxe 4.0.0-preview.5+1aaf080
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_audio1_AudioChannel
#include <hxinc/kha/audio1/AudioChannel.h>
#endif
#ifndef INCLUDED_kha_audio2_Audio1
#include <hxinc/kha/audio2/Audio1.h>
#endif
#ifndef INCLUDED_kha_audio2_AudioChannel
#include <hxinc/kha/audio2/AudioChannel.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_3_new,"kha.audio2.AudioChannel","new",0x149245e7,"kha.audio2.AudioChannel.new","kha/audio2/AudioChannel.hx",3,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_16_nextSamples,"kha.audio2.AudioChannel","nextSamples",0x6e9d10dd,"kha.audio2.AudioChannel.nextSamples","kha/audio2/AudioChannel.hx",16,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_52_play,"kha.audio2.AudioChannel","play",0xecc28e8d,"kha.audio2.AudioChannel.play","kha/audio2/AudioChannel.hx",52,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_61_pause,"kha.audio2.AudioChannel","pause",0x3643fc3d,"kha.audio2.AudioChannel.pause","kha/audio2/AudioChannel.hx",61,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_65_stop,"kha.audio2.AudioChannel","stop",0xeec4509b,"kha.audio2.AudioChannel.stop","kha/audio2/AudioChannel.hx",65,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_71_get_length,"kha.audio2.AudioChannel","get_length",0xd6d35e08,"kha.audio2.AudioChannel.get_length","kha/audio2/AudioChannel.hx",71,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_77_get_position,"kha.audio2.AudioChannel","get_position",0x6424764b,"kha.audio2.AudioChannel.get_position","kha/audio2/AudioChannel.hx",77,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_83_get_volume,"kha.audio2.AudioChannel","get_volume",0x971ef2fc,"kha.audio2.AudioChannel.get_volume","kha/audio2/AudioChannel.hx",83,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_87_set_volume,"kha.audio2.AudioChannel","set_volume",0x9a9c9170,"kha.audio2.AudioChannel.set_volume","kha/audio2/AudioChannel.hx",87,0x9a222549)
HX_LOCAL_STACK_FRAME(_hx_pos_7c240edc2e8b12ad_93_get_finished,"kha.audio2.AudioChannel","get_finished",0x2e386914,"kha.audio2.AudioChannel.get_finished","kha/audio2/AudioChannel.hx",93,0x9a222549)
namespace kha{
namespace audio2{

void AudioChannel_obj::__construct(bool looping){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_3_new)
HXLINE(   7)		this->paused = false;
HXLINE(  11)		this->looping = looping;
HXLINE(  12)		this->myVolume = ( (Float)(1) );
HXLINE(  13)		this->myPosition = 0;
            	}

Dynamic AudioChannel_obj::__CreateEmpty() { return new AudioChannel_obj; }

void *AudioChannel_obj::_hx_vtable = 0;

Dynamic AudioChannel_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< AudioChannel_obj > _hx_result = new AudioChannel_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool AudioChannel_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x0cffaaed;
}

static ::kha::audio1::AudioChannel_obj _hx_kha_audio2_AudioChannel__hx_kha_audio1_AudioChannel= {
	( void (hx::Object::*)())&::kha::audio2::AudioChannel_obj::play,
	( void (hx::Object::*)())&::kha::audio2::AudioChannel_obj::pause,
	( void (hx::Object::*)())&::kha::audio2::AudioChannel_obj::stop,
	( Float (hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_length,
	( Float (hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_position,
	( Float (hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_volume,
	( Float (hx::Object::*)(Float))&::kha::audio2::AudioChannel_obj::set_volume,
	( bool (hx::Object::*)())&::kha::audio2::AudioChannel_obj::get_finished,
};

void *AudioChannel_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x78040b2c: return &_hx_kha_audio2_AudioChannel__hx_kha_audio1_AudioChannel;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void AudioChannel_obj::nextSamples( ::kha::arrays::Float32ArrayPrivate samples,int length,int sampleRate){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_16_nextSamples)
HXLINE(  17)		if (this->paused) {
HXLINE(  18)			{
HXLINE(  18)				int _g = 0;
HXDLIN(  18)				int _g1 = length;
HXDLIN(  18)				while((_g < _g1)){
HXLINE(  18)					_g = (_g + 1);
HXDLIN(  18)					int i = (_g - 1);
HXLINE(  19)					samples->self.set(i,( (float)(0) ));
            				}
            			}
HXLINE(  21)			return;
            		}
HXLINE(  24)		int w_ptr = 0;
HXLINE(  25)		int chk_ptr = 0;
HXLINE(  26)		while((w_ptr < length)){
HXLINE(  28)			int addressable_data = this->data->self.length();
HXDLIN(  28)			int addressable_data1 = (addressable_data - this->myPosition);
HXLINE(  29)			int next_chunk;
HXDLIN(  29)			if ((addressable_data1 < (length - w_ptr))) {
HXLINE(  29)				next_chunk = addressable_data1;
            			}
            			else {
HXLINE(  29)				next_chunk = (length - w_ptr);
            			}
HXLINE(  30)			while((chk_ptr < next_chunk)){
HXLINE(  31)				{
HXLINE(  31)					float value = this->data->self.get(this->myPosition);
HXDLIN(  31)					samples->self.set(w_ptr,value);
            				}
HXLINE(  32)				++this->myPosition;
HXLINE(  33)				chk_ptr = (chk_ptr + 1);
HXLINE(  34)				w_ptr = (w_ptr + 1);
            			}
HXLINE(  37)			if (!(this->looping)) {
HXLINE(  37)				goto _hx_goto_2;
            			}
            			else {
HXLINE(  39)				chk_ptr = 0;
HXLINE(  40)				int _hx_tmp = this->myPosition;
HXDLIN(  40)				if ((_hx_tmp >= this->data->self.length())) {
HXLINE(  41)					this->myPosition = 0;
            				}
            			}
            		}
            		_hx_goto_2:;
HXLINE(  46)		while((w_ptr < length)){
HXLINE(  47)			samples->self.set(w_ptr,( (float)(0) ));
HXLINE(  48)			w_ptr = (w_ptr + 1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(AudioChannel_obj,nextSamples,(void))

void AudioChannel_obj::play(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_52_play)
HXLINE(  53)		this->paused = false;
HXLINE(  54)		if (this->get_finished()) {
HXLINE(  55)			this->myPosition = 0;
HXLINE(  56)			::kha::audio2::Audio1_obj::_playAgain(hx::ObjectPtr<OBJ_>(this));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,play,(void))

void AudioChannel_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_61_pause)
HXDLIN(  61)		this->paused = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,pause,(void))

void AudioChannel_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_65_stop)
HXDLIN(  65)		this->myPosition = this->data->self.length();
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,stop,(void))

Float AudioChannel_obj::get_length(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_71_get_length)
HXDLIN(  71)		return ((( (Float)(this->data->self.length()) ) / ( (Float)(44100) )) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_length,return )

Float AudioChannel_obj::get_position(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_77_get_position)
HXDLIN(  77)		return ((( (Float)(this->myPosition) ) / ( (Float)(44100) )) / ( (Float)(2) ));
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_position,return )

Float AudioChannel_obj::get_volume(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_83_get_volume)
HXDLIN(  83)		return this->myVolume;
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_volume,return )

Float AudioChannel_obj::set_volume(Float value){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_87_set_volume)
HXDLIN(  87)		return (this->myVolume = value);
            	}


HX_DEFINE_DYNAMIC_FUNC1(AudioChannel_obj,set_volume,return )

bool AudioChannel_obj::get_finished(){
            	HX_STACKFRAME(&_hx_pos_7c240edc2e8b12ad_93_get_finished)
HXDLIN(  93)		int _hx_tmp = this->myPosition;
HXDLIN(  93)		return (_hx_tmp >= this->data->self.length());
            	}


HX_DEFINE_DYNAMIC_FUNC0(AudioChannel_obj,get_finished,return )


hx::ObjectPtr< AudioChannel_obj > AudioChannel_obj::__new(bool looping) {
	hx::ObjectPtr< AudioChannel_obj > __this = new AudioChannel_obj();
	__this->__construct(looping);
	return __this;
}

hx::ObjectPtr< AudioChannel_obj > AudioChannel_obj::__alloc(hx::Ctx *_hx_ctx,bool looping) {
	AudioChannel_obj *__this = (AudioChannel_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(AudioChannel_obj), true, "kha.audio2.AudioChannel"));
	*(void **)__this = AudioChannel_obj::_hx_vtable;
	__this->__construct(looping);
	return __this;
}

AudioChannel_obj::AudioChannel_obj()
{
}

void AudioChannel_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(AudioChannel);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(myVolume,"myVolume");
	HX_MARK_MEMBER_NAME(myPosition,"myPosition");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(looping,"looping");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_MEMBER_NAME(position,"position");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_END_CLASS();
}

void AudioChannel_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(myVolume,"myVolume");
	HX_VISIT_MEMBER_NAME(myPosition,"myPosition");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(looping,"looping");
	HX_VISIT_MEMBER_NAME(length,"length");
	HX_VISIT_MEMBER_NAME(position,"position");
	HX_VISIT_MEMBER_NAME(finished,"finished");
}

hx::Val AudioChannel_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"play") ) { return hx::Val( play_dyn() ); }
		if (HX_FIELD_EQ(inName,"stop") ) { return hx::Val( stop_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"length") ) { return hx::Val( inCallProp == hx::paccAlways ? get_length() : length ); }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_volume() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"looping") ) { return hx::Val( looping ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { return hx::Val( myVolume ); }
		if (HX_FIELD_EQ(inName,"position") ) { return hx::Val( inCallProp == hx::paccAlways ? get_position() : position ); }
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( inCallProp == hx::paccAlways ? get_finished() : finished ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPosition") ) { return hx::Val( myPosition ); }
		if (HX_FIELD_EQ(inName,"get_length") ) { return hx::Val( get_length_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_volume") ) { return hx::Val( get_volume_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_volume") ) { return hx::Val( set_volume_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"nextSamples") ) { return hx::Val( nextSamples_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_position") ) { return hx::Val( get_position_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_finished") ) { return hx::Val( get_finished_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val AudioChannel_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"volume") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_volume(inValue.Cast< Float >()) ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"looping") ) { looping=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"myVolume") ) { myVolume=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"position") ) { position=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPosition") ) { myPosition=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void AudioChannel_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	outFields->push(HX_("myVolume",66,56,07,96));
	outFields->push(HX_("myPosition",35,08,7c,38));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("looping",fe,7c,7d,20));
	outFields->push(HX_("length",e6,94,07,9f));
	outFields->push(HX_("position",a9,a0,fa,ca));
	outFields->push(HX_("volume",da,29,53,5f));
	outFields->push(HX_("finished",72,93,0e,95));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo AudioChannel_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::arrays::Float32ArrayPrivate */ ,(int)offsetof(AudioChannel_obj,data),HX_("data",2a,56,63,42)},
	{hx::fsFloat,(int)offsetof(AudioChannel_obj,myVolume),HX_("myVolume",66,56,07,96)},
	{hx::fsInt,(int)offsetof(AudioChannel_obj,myPosition),HX_("myPosition",35,08,7c,38)},
	{hx::fsBool,(int)offsetof(AudioChannel_obj,paused),HX_("paused",ae,40,84,ef)},
	{hx::fsBool,(int)offsetof(AudioChannel_obj,looping),HX_("looping",fe,7c,7d,20)},
	{hx::fsFloat,(int)offsetof(AudioChannel_obj,length),HX_("length",e6,94,07,9f)},
	{hx::fsFloat,(int)offsetof(AudioChannel_obj,position),HX_("position",a9,a0,fa,ca)},
	{hx::fsBool,(int)offsetof(AudioChannel_obj,finished),HX_("finished",72,93,0e,95)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *AudioChannel_obj_sStaticStorageInfo = 0;
#endif

static ::String AudioChannel_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("myVolume",66,56,07,96),
	HX_("myPosition",35,08,7c,38),
	HX_("paused",ae,40,84,ef),
	HX_("looping",fe,7c,7d,20),
	HX_("nextSamples",56,3c,13,5a),
	HX_("play",f4,2d,5a,4a),
	HX_("pause",f6,d6,57,bd),
	HX_("stop",02,f0,5b,4c),
	HX_("length",e6,94,07,9f),
	HX_("get_length",af,04,8f,8f),
	HX_("position",a9,a0,fa,ca),
	HX_("get_position",b2,54,14,80),
	HX_("get_volume",a3,99,da,4f),
	HX_("set_volume",17,38,58,53),
	HX_("finished",72,93,0e,95),
	HX_("get_finished",7b,47,28,4a),
	::String(null()) };

hx::Class AudioChannel_obj::__mClass;

void AudioChannel_obj::__register()
{
	AudioChannel_obj _hx_dummy;
	AudioChannel_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.audio2.AudioChannel",75,c6,99,80);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(AudioChannel_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< AudioChannel_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = AudioChannel_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = AudioChannel_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace audio2
