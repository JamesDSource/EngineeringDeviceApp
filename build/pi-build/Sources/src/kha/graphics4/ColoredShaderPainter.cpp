// Generated by Haxe 4.0.0-preview.5+1aaf080
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_7d028c26efabce49
#define INCLUDED_7d028c26efabce49
#include "cpp_uint32array.h"
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_arrays_Uint32ArrayPrivate
#include <hxinc/kha/arrays/Uint32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <hxinc/kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_ColoredShaderPainter
#include <hxinc/kha/graphics4/ColoredShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_IndexBuffer
#include <hxinc/kha/graphics4/IndexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_Usage
#include <hxinc/kha/graphics4/Usage.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexBuffer
#include <hxinc/kha/graphics4/VertexBuffer.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fa9e8f706269b90e_257_new,"kha.graphics4.ColoredShaderPainter","new",0x02e5b025,"kha.graphics4.ColoredShaderPainter.new","kha/graphics4/Graphics2.hx",257,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_292_get_pipeline,"kha.graphics4.ColoredShaderPainter","get_pipeline",0x7ba5eec6,"kha.graphics4.ColoredShaderPainter.get_pipeline","kha/graphics4/Graphics2.hx",292,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_295_set_pipeline,"kha.graphics4.ColoredShaderPainter","set_pipeline",0x909f123a,"kha.graphics4.ColoredShaderPainter.set_pipeline","kha/graphics4/Graphics2.hx",295,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_306_setProjection,"kha.graphics4.ColoredShaderPainter","setProjection",0x926aeed6,"kha.graphics4.ColoredShaderPainter.setProjection","kha/graphics4/Graphics2.hx",306,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_320_initBuffers,"kha.graphics4.ColoredShaderPainter","initBuffers",0x83c9bf08,"kha.graphics4.ColoredShaderPainter.initBuffers","kha/graphics4/Graphics2.hx",320,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_354_setRectVertices,"kha.graphics4.ColoredShaderPainter","setRectVertices",0xe6315344,"kha.graphics4.ColoredShaderPainter.setRectVertices","kha/graphics4/Graphics2.hx",354,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_373_setRectColors,"kha.graphics4.ColoredShaderPainter","setRectColors",0x999e603b,"kha.graphics4.ColoredShaderPainter.setRectColors","kha/graphics4/Graphics2.hx",373,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_397_setTriVertices,"kha.graphics4.ColoredShaderPainter","setTriVertices",0x2457a01d,"kha.graphics4.ColoredShaderPainter.setTriVertices","kha/graphics4/Graphics2.hx",397,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_412_setTriColors,"kha.graphics4.ColoredShaderPainter","setTriColors",0xb69b94d4,"kha.graphics4.ColoredShaderPainter.setTriColors","kha/graphics4/Graphics2.hx",412,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_431_drawBuffer,"kha.graphics4.ColoredShaderPainter","drawBuffer",0xe9220aff,"kha.graphics4.ColoredShaderPainter.drawBuffer","kha/graphics4/Graphics2.hx",431,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_452_drawTriBuffer,"kha.graphics4.ColoredShaderPainter","drawTriBuffer",0xacdf87ec,"kha.graphics4.ColoredShaderPainter.drawTriBuffer","kha/graphics4/Graphics2.hx",452,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_477_fillRect,"kha.graphics4.ColoredShaderPainter","fillRect",0xd64d1b62,"kha.graphics4.ColoredShaderPainter.fillRect","kha/graphics4/Graphics2.hx",477,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_487_fillTriangle,"kha.graphics4.ColoredShaderPainter","fillTriangle",0x0d428406,"kha.graphics4.ColoredShaderPainter.fillTriangle","kha/graphics4/Graphics2.hx",487,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_498_endTris,"kha.graphics4.ColoredShaderPainter","endTris",0x1785fca8,"kha.graphics4.ColoredShaderPainter.endTris","kha/graphics4/Graphics2.hx",498,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_502_endRects,"kha.graphics4.ColoredShaderPainter","endRects",0x4e4d9b0f,"kha.graphics4.ColoredShaderPainter.endRects","kha/graphics4/Graphics2.hx",502,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_505_end,"kha.graphics4.ColoredShaderPainter","end",0x02dee3a0,"kha.graphics4.ColoredShaderPainter.end","kha/graphics4/Graphics2.hx",505,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_309_initShaders,"kha.graphics4.ColoredShaderPainter","initShaders",0x31bf9d43,"kha.graphics4.ColoredShaderPainter.initShaders","kha/graphics4/Graphics2.hx",309,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_259_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",259,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_260_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",260,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_262_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",262,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_fa9e8f706269b90e_268_boot,"kha.graphics4.ColoredShaderPainter","boot",0x7e2d70cd,"kha.graphics4.ColoredShaderPainter.boot","kha/graphics4/Graphics2.hx",268,0x0c1de808)
namespace kha{
namespace graphics4{

void ColoredShaderPainter_obj::__construct(::Dynamic g4){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_257_new)
HXLINE( 280)		this->destinationBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE( 279)		this->sourceBlend = ::kha::graphics4::BlendingFactor_obj::Undefined_dyn();
HXLINE( 275)		this->myPipeline = null();
HXLINE( 283)		this->g = g4;
HXLINE( 284)		::kha::graphics4::ColoredShaderPainter_obj::bufferIndex = 0;
HXLINE( 285)		::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex = 0;
HXLINE( 286)		::kha::graphics4::ColoredShaderPainter_obj::initShaders();
HXLINE( 287)		this->initBuffers();
HXLINE( 288)		this->projectionLocation = ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
            	}

Dynamic ColoredShaderPainter_obj::__CreateEmpty() { return new ColoredShaderPainter_obj; }

void *ColoredShaderPainter_obj::_hx_vtable = 0;

Dynamic ColoredShaderPainter_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< ColoredShaderPainter_obj > _hx_result = new ColoredShaderPainter_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool ColoredShaderPainter_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x259d6849;
}

 ::kha::graphics4::PipelineState ColoredShaderPainter_obj::get_pipeline(){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_292_get_pipeline)
HXDLIN( 292)		return this->myPipeline;
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,get_pipeline,return )

 ::kha::graphics4::PipelineState ColoredShaderPainter_obj::set_pipeline( ::kha::graphics4::PipelineState pipe){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_295_set_pipeline)
HXLINE( 296)		if (hx::IsNull( pipe )) {
HXLINE( 297)			this->projectionLocation = ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
            		}
            		else {
HXLINE( 300)			this->projectionLocation = pipe->getConstantLocation(HX_("projectionMatrix",30,88,bb,d0));
            		}
HXLINE( 302)		return (this->myPipeline = pipe);
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,set_pipeline,return )

void ColoredShaderPainter_obj::setProjection( ::kha::math::FastMatrix4 projectionMatrix){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_306_setProjection)
HXDLIN( 306)		this->projectionMatrix = projectionMatrix;
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,setProjection,(void))

void ColoredShaderPainter_obj::initBuffers(){
            	HX_GC_STACKFRAME(&_hx_pos_fa9e8f706269b90e_320_initBuffers)
HXDLIN( 320)		if (hx::IsNull( ::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer )) {
HXLINE( 321)			::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,400,::kha::graphics4::ColoredShaderPainter_obj::structure,::kha::graphics4::Usage_obj::DynamicUsage_dyn(),null(),null());
HXLINE( 322)			::kha::graphics4::ColoredShaderPainter_obj::rectVertices = ::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer->lock(null(),null());
HXLINE( 324)			::kha::graphics4::ColoredShaderPainter_obj::indexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,600,::kha::graphics4::Usage_obj::StaticUsage_dyn(),null());
HXLINE( 325)			 ::kha::arrays::Uint32ArrayPrivate indices = ::kha::graphics4::ColoredShaderPainter_obj::indexBuffer->lock(null(),null());
HXLINE( 326)			{
HXLINE( 326)				int _g = 0;
HXDLIN( 326)				while((_g < 100)){
HXLINE( 326)					_g = (_g + 1);
HXDLIN( 326)					int i = (_g - 1);
HXLINE( 327)					indices->self.set(((i * 3) * 2),(i * 4));
HXLINE( 328)					indices->self.set((((i * 3) * 2) + 1),((i * 4) + 1));
HXLINE( 329)					indices->self.set((((i * 3) * 2) + 2),((i * 4) + 2));
HXLINE( 330)					indices->self.set((((i * 3) * 2) + 3),(i * 4));
HXLINE( 331)					indices->self.set((((i * 3) * 2) + 4),((i * 4) + 2));
HXLINE( 332)					indices->self.set((((i * 3) * 2) + 5),((i * 4) + 3));
            				}
            			}
HXLINE( 334)			::kha::graphics4::ColoredShaderPainter_obj::indexBuffer->unlock();
HXLINE( 336)			::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer =  ::kha::graphics4::VertexBuffer_obj::__alloc( HX_CTX ,300,::kha::graphics4::ColoredShaderPainter_obj::structure,::kha::graphics4::Usage_obj::DynamicUsage_dyn(),null(),null());
HXLINE( 337)			::kha::graphics4::ColoredShaderPainter_obj::triangleVertices = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer->lock(null(),null());
HXLINE( 339)			::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer =  ::kha::graphics4::IndexBuffer_obj::__alloc( HX_CTX ,300,::kha::graphics4::Usage_obj::StaticUsage_dyn(),null());
HXLINE( 340)			 ::kha::arrays::Uint32ArrayPrivate triIndices = ::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer->lock(null(),null());
HXLINE( 341)			{
HXLINE( 341)				int _g1 = 0;
HXDLIN( 341)				while((_g1 < 100)){
HXLINE( 341)					_g1 = (_g1 + 1);
HXDLIN( 341)					int i1 = (_g1 - 1);
HXLINE( 342)					triIndices->self.set((i1 * 3),(i1 * 3));
HXLINE( 343)					triIndices->self.set(((i1 * 3) + 1),((i1 * 3) + 1));
HXLINE( 344)					triIndices->self.set(((i1 * 3) + 2),((i1 * 3) + 2));
            				}
            			}
HXLINE( 346)			::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer->unlock();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,initBuffers,(void))

void ColoredShaderPainter_obj::setRectVertices(Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_354_setRectVertices)
HXLINE( 355)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 7) * 4);
HXLINE( 356)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set(baseIndex,( (float)(bottomleftx) ));
HXLINE( 357)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 1),( (float)(bottomlefty) ));
HXLINE( 358)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 2),( (float)(((Float)-5.0)) ));
HXLINE( 360)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 7),( (float)(topleftx) ));
HXLINE( 361)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 8),( (float)(toplefty) ));
HXLINE( 362)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 9),( (float)(((Float)-5.0)) ));
HXLINE( 364)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 14),( (float)(toprightx) ));
HXLINE( 365)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 15),( (float)(toprighty) ));
HXLINE( 366)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 16),( (float)(((Float)-5.0)) ));
HXLINE( 368)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 21),( (float)(bottomrightx) ));
HXLINE( 369)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 22),( (float)(bottomrighty) ));
HXLINE( 370)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 23),( (float)(((Float)-5.0)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC8(ColoredShaderPainter_obj,setRectVertices,(void))

void ColoredShaderPainter_obj::setRectColors(float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_373_setRectColors)
HXLINE( 374)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 7) * 4);
HXLINE( 375)		float a = (opacity * (( (float)(hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 376)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 3),(( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 377)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 4),(( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 378)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 5),(( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 379)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 6),a);
HXLINE( 381)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 10),(( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 382)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 11),(( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 383)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 12),(( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 384)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 13),a);
HXLINE( 386)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 17),(( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 387)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 18),(( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 388)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 19),(( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 389)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 20),a);
HXLINE( 391)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 24),(( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 392)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 25),(( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 393)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 26),(( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 394)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices->self.set((baseIndex + 27),a);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColoredShaderPainter_obj,setRectColors,(void))

void ColoredShaderPainter_obj::setTriVertices(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_397_setTriVertices)
HXLINE( 398)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 7) * 3);
HXLINE( 399)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set(baseIndex,( (float)(x1) ));
HXLINE( 400)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 1),( (float)(y1) ));
HXLINE( 401)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 2),( (float)(((Float)-5.0)) ));
HXLINE( 403)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 7),( (float)(x2) ));
HXLINE( 404)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 8),( (float)(y2) ));
HXLINE( 405)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 9),( (float)(((Float)-5.0)) ));
HXLINE( 407)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 14),( (float)(x3) ));
HXLINE( 408)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 15),( (float)(y3) ));
HXLINE( 409)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 16),( (float)(((Float)-5.0)) ));
            	}


HX_DEFINE_DYNAMIC_FUNC6(ColoredShaderPainter_obj,setTriVertices,(void))

void ColoredShaderPainter_obj::setTriColors(float opacity,int color){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_412_setTriColors)
HXLINE( 413)		int baseIndex = ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 7) * 3);
HXLINE( 414)		float a = (opacity * (( (float)(hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 415)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 3),(( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 416)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 4),(( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 417)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 5),(( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 418)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 6),a);
HXLINE( 420)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 10),(( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 421)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 11),(( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 422)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 12),(( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 423)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 13),a);
HXLINE( 425)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 17),(( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 426)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 18),(( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 427)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 19),(( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) )));
HXLINE( 428)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices->self.set((baseIndex + 20),a);
            	}


HX_DEFINE_DYNAMIC_FUNC2(ColoredShaderPainter_obj,setTriColors,(void))

void ColoredShaderPainter_obj::drawBuffer(bool trisDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_431_drawBuffer)
HXLINE( 432)		if (!(trisDone)) {
HXLINE( 432)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 432)				this->drawTriBuffer(true);
            			}
            		}
HXLINE( 434)		::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer->unlock();
HXLINE( 435)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer);
HXLINE( 436)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::indexBuffer);
HXLINE( 437)		::Dynamic _hx_tmp = this->g;
HXDLIN( 437)		 ::kha::graphics4::PipelineState _hx_tmp1;
HXDLIN( 437)		if (hx::IsNull( this->get_pipeline() )) {
HXLINE( 437)			_hx_tmp1 = ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline;
            		}
            		else {
HXLINE( 437)			_hx_tmp1 = this->get_pipeline();
            		}
HXDLIN( 437)		::kha::graphics4::Graphics_obj::setPipeline(_hx_tmp,_hx_tmp1);
HXLINE( 438)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->projectionLocation,this->projectionMatrix);
HXLINE( 446)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,0,((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex * 2) * 3));
HXLINE( 448)		::kha::graphics4::ColoredShaderPainter_obj::bufferIndex = 0;
HXLINE( 449)		::kha::graphics4::ColoredShaderPainter_obj::rectVertices = ::kha::graphics4::ColoredShaderPainter_obj::rectVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,drawBuffer,(void))

void ColoredShaderPainter_obj::drawTriBuffer(bool rectsDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_452_drawTriBuffer)
HXLINE( 453)		if (!(rectsDone)) {
HXLINE( 453)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 453)				this->drawBuffer(true);
            			}
            		}
HXLINE( 455)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer->unlock();
HXLINE( 456)		::kha::graphics4::Graphics_obj::setVertexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer);
HXLINE( 457)		::kha::graphics4::Graphics_obj::setIndexBuffer(this->g,::kha::graphics4::ColoredShaderPainter_obj::triangleIndexBuffer);
HXLINE( 458)		::Dynamic _hx_tmp = this->g;
HXDLIN( 458)		 ::kha::graphics4::PipelineState _hx_tmp1;
HXDLIN( 458)		if (hx::IsNull( this->get_pipeline() )) {
HXLINE( 458)			_hx_tmp1 = ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline;
            		}
            		else {
HXLINE( 458)			_hx_tmp1 = this->get_pipeline();
            		}
HXDLIN( 458)		::kha::graphics4::Graphics_obj::setPipeline(_hx_tmp,_hx_tmp1);
HXLINE( 459)		::kha::graphics4::Graphics_obj::setMatrix(this->g,this->projectionLocation,this->projectionMatrix);
HXLINE( 467)		::kha::graphics4::Graphics_obj::drawIndexedVertices(this->g,0,(::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex * 3));
HXLINE( 469)		::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex = 0;
HXLINE( 470)		::kha::graphics4::ColoredShaderPainter_obj::triangleVertices = ::kha::graphics4::ColoredShaderPainter_obj::triangleVertexBuffer->lock(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,drawTriBuffer,(void))

void ColoredShaderPainter_obj::fillRect(float opacity,int color,Float bottomleftx,Float bottomlefty,Float topleftx,Float toplefty,Float toprightx,Float toprighty,Float bottomrightx,Float bottomrighty){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_477_fillRect)
HXLINE( 478)		if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 478)			this->drawTriBuffer(true);
            		}
HXLINE( 480)		if (((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex + 1) >= 100)) {
HXLINE( 480)			this->drawBuffer(false);
            		}
HXLINE( 482)		this->setRectColors(opacity,color);
HXLINE( 483)		this->setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
HXLINE( 484)		++::kha::graphics4::ColoredShaderPainter_obj::bufferIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC10(ColoredShaderPainter_obj,fillRect,(void))

void ColoredShaderPainter_obj::fillTriangle(float opacity,int color,Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_487_fillTriangle)
HXLINE( 488)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 488)			this->drawBuffer(true);
            		}
HXLINE( 490)		if (((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex + 1) >= 100)) {
HXLINE( 490)			this->drawTriBuffer(false);
            		}
HXLINE( 492)		this->setTriColors(opacity,color);
HXLINE( 493)		this->setTriVertices(x1,y1,x2,y2,x3,y3);
HXLINE( 494)		++::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex;
            	}


HX_DEFINE_DYNAMIC_FUNC8(ColoredShaderPainter_obj,fillTriangle,(void))

void ColoredShaderPainter_obj::endTris(bool rectsDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_498_endTris)
HXDLIN( 498)		if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXDLIN( 498)			this->drawTriBuffer(rectsDone);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,endTris,(void))

void ColoredShaderPainter_obj::endRects(bool trisDone){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_502_endRects)
HXDLIN( 502)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXDLIN( 502)			this->drawBuffer(trisDone);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ColoredShaderPainter_obj,endRects,(void))

void ColoredShaderPainter_obj::end(){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_505_end)
HXLINE( 506)		if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 506)			this->drawTriBuffer(false);
            		}
HXLINE( 507)		if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 507)			this->drawBuffer(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,end,(void))

 ::kha::graphics4::PipelineState ColoredShaderPainter_obj::shaderPipeline;

 ::kha::graphics4::VertexStructure ColoredShaderPainter_obj::structure;

int ColoredShaderPainter_obj::bufferSize;

int ColoredShaderPainter_obj::bufferIndex;

 ::kha::graphics4::VertexBuffer ColoredShaderPainter_obj::rectVertexBuffer;

 ::kha::arrays::Float32ArrayPrivate ColoredShaderPainter_obj::rectVertices;

 ::kha::graphics4::IndexBuffer ColoredShaderPainter_obj::indexBuffer;

int ColoredShaderPainter_obj::triangleBufferSize;

int ColoredShaderPainter_obj::triangleBufferIndex;

 ::kha::graphics4::VertexBuffer ColoredShaderPainter_obj::triangleVertexBuffer;

 ::kha::arrays::Float32ArrayPrivate ColoredShaderPainter_obj::triangleVertices;

 ::kha::graphics4::IndexBuffer ColoredShaderPainter_obj::triangleIndexBuffer;

void ColoredShaderPainter_obj::initShaders(){
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_309_initShaders)
HXLINE( 310)		if (hx::IsNull( ::kha::graphics4::ColoredShaderPainter_obj::structure )) {
HXLINE( 311)			::kha::graphics4::ColoredShaderPainter_obj::structure = ::kha::graphics4::Graphics2_obj::createColoredVertexStructure();
            		}
HXLINE( 313)		if (hx::IsNull( ::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline )) {
HXLINE( 314)			::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline = ::kha::graphics4::Graphics2_obj::createColoredPipeline(::kha::graphics4::ColoredShaderPainter_obj::structure);
HXLINE( 315)			::kha::graphics4::ColoredShaderPainter_obj::shaderPipeline->compile();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(ColoredShaderPainter_obj,initShaders,(void))


hx::ObjectPtr< ColoredShaderPainter_obj > ColoredShaderPainter_obj::__new(::Dynamic g4) {
	hx::ObjectPtr< ColoredShaderPainter_obj > __this = new ColoredShaderPainter_obj();
	__this->__construct(g4);
	return __this;
}

hx::ObjectPtr< ColoredShaderPainter_obj > ColoredShaderPainter_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic g4) {
	ColoredShaderPainter_obj *__this = (ColoredShaderPainter_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(ColoredShaderPainter_obj), true, "kha.graphics4.ColoredShaderPainter"));
	*(void **)__this = ColoredShaderPainter_obj::_hx_vtable;
	__this->__construct(g4);
	return __this;
}

ColoredShaderPainter_obj::ColoredShaderPainter_obj()
{
}

void ColoredShaderPainter_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ColoredShaderPainter);
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myPipeline,"myPipeline");
	HX_MARK_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_MARK_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_MARK_MEMBER_NAME(destinationBlend,"destinationBlend");
	HX_MARK_END_CLASS();
}

void ColoredShaderPainter_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myPipeline,"myPipeline");
	HX_VISIT_MEMBER_NAME(projectionLocation,"projectionLocation");
	HX_VISIT_MEMBER_NAME(sourceBlend,"sourceBlend");
	HX_VISIT_MEMBER_NAME(destinationBlend,"destinationBlend");
}

hx::Val ColoredShaderPainter_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"endTris") ) { return hx::Val( endTris_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( get_pipeline() ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"endRects") ) { return hx::Val( endRects_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { return hx::Val( myPipeline ); }
		if (HX_FIELD_EQ(inName,"drawBuffer") ) { return hx::Val( drawBuffer_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { return hx::Val( sourceBlend ); }
		if (HX_FIELD_EQ(inName,"initBuffers") ) { return hx::Val( initBuffers_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"get_pipeline") ) { return hx::Val( get_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_pipeline") ) { return hx::Val( set_pipeline_dyn() ); }
		if (HX_FIELD_EQ(inName,"setTriColors") ) { return hx::Val( setTriColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillTriangle") ) { return hx::Val( fillTriangle_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn() ); }
		if (HX_FIELD_EQ(inName,"setRectColors") ) { return hx::Val( setRectColors_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawTriBuffer") ) { return hx::Val( drawTriBuffer_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"setTriVertices") ) { return hx::Val( setTriVertices_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"setRectVertices") ) { return hx::Val( setRectVertices_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix ); }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { return hx::Val( destinationBlend ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { return hx::Val( projectionLocation ); }
	}
	return super::__Field(inName,inCallProp);
}

bool ColoredShaderPainter_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { outValue = ( structure ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { outValue = ( bufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { outValue = ( indexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"initShaders") ) { outValue = initShaders_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { outValue = ( rectVertices ); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { outValue = ( shaderPipeline ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { outValue = ( rectVertexBuffer ); return true; }
		if (HX_FIELD_EQ(inName,"triangleVertices") ) { outValue = ( triangleVertices ); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"triangleBufferIndex") ) { outValue = ( triangleBufferIndex ); return true; }
		if (HX_FIELD_EQ(inName,"triangleIndexBuffer") ) { outValue = ( triangleIndexBuffer ); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"triangleVertexBuffer") ) { outValue = ( triangleVertexBuffer ); return true; }
	}
	return false;
}

hx::Val ColoredShaderPainter_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pipeline") ) { if (inCallProp == hx::paccAlways) return hx::Val( set_pipeline(inValue.Cast<  ::kha::graphics4::PipelineState >()) ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"myPipeline") ) { myPipeline=inValue.Cast<  ::kha::graphics4::PipelineState >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"sourceBlend") ) { sourceBlend=inValue.Cast<  ::kha::graphics4::BlendingFactor >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		if (HX_FIELD_EQ(inName,"destinationBlend") ) { destinationBlend=inValue.Cast<  ::kha::graphics4::BlendingFactor >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"projectionLocation") ) { projectionLocation=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool ColoredShaderPainter_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"structure") ) { structure=ioValue.Cast<  ::kha::graphics4::VertexStructure >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bufferIndex") ) { bufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"indexBuffer") ) { indexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"rectVertices") ) { rectVertices=ioValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"shaderPipeline") ) { shaderPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"rectVertexBuffer") ) { rectVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
		if (HX_FIELD_EQ(inName,"triangleVertices") ) { triangleVertices=ioValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"triangleBufferIndex") ) { triangleBufferIndex=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"triangleIndexBuffer") ) { triangleIndexBuffer=ioValue.Cast<  ::kha::graphics4::IndexBuffer >(); return true; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"triangleVertexBuffer") ) { triangleVertexBuffer=ioValue.Cast<  ::kha::graphics4::VertexBuffer >(); return true; }
	}
	return false;
}

void ColoredShaderPainter_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("projectionMatrix",30,88,bb,d0));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("myPipeline",ae,22,05,b9));
	outFields->push(HX_("projectionLocation",e4,59,25,9b));
	outFields->push(HX_("pipeline",22,bb,83,4b));
	outFields->push(HX_("sourceBlend",76,ad,fa,e3));
	outFields->push(HX_("destinationBlend",e3,ca,bf,2e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo ColoredShaderPainter_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::kha::math::FastMatrix4 */ ,(int)offsetof(ColoredShaderPainter_obj,projectionMatrix),HX_("projectionMatrix",30,88,bb,d0)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(ColoredShaderPainter_obj,g),HX_("g",67,00,00,00)},
	{hx::fsObject /*  ::kha::graphics4::PipelineState */ ,(int)offsetof(ColoredShaderPainter_obj,myPipeline),HX_("myPipeline",ae,22,05,b9)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(ColoredShaderPainter_obj,projectionLocation),HX_("projectionLocation",e4,59,25,9b)},
	{hx::fsObject /*  ::kha::graphics4::BlendingFactor */ ,(int)offsetof(ColoredShaderPainter_obj,sourceBlend),HX_("sourceBlend",76,ad,fa,e3)},
	{hx::fsObject /*  ::kha::graphics4::BlendingFactor */ ,(int)offsetof(ColoredShaderPainter_obj,destinationBlend),HX_("destinationBlend",e3,ca,bf,2e)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo ColoredShaderPainter_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::kha::graphics4::PipelineState */ ,(void *) &ColoredShaderPainter_obj::shaderPipeline,HX_("shaderPipeline",67,63,91,fc)},
	{hx::fsObject /*  ::kha::graphics4::VertexStructure */ ,(void *) &ColoredShaderPainter_obj::structure,HX_("structure",33,54,4f,47)},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::bufferSize,HX_("bufferSize",e1,09,64,9d)},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::bufferIndex,HX_("bufferIndex",f2,2d,60,5b)},
	{hx::fsObject /*  ::kha::graphics4::VertexBuffer */ ,(void *) &ColoredShaderPainter_obj::rectVertexBuffer,HX_("rectVertexBuffer",c8,6e,b4,97)},
	{hx::fsObject /*  ::kha::arrays::Float32ArrayPrivate */ ,(void *) &ColoredShaderPainter_obj::rectVertices,HX_("rectVertices",3d,8d,f6,54)},
	{hx::fsObject /*  ::kha::graphics4::IndexBuffer */ ,(void *) &ColoredShaderPainter_obj::indexBuffer,HX_("indexBuffer",b2,65,a6,f5)},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::triangleBufferSize,HX_("triangleBufferSize",c9,16,78,ab)},
	{hx::fsInt,(void *) &ColoredShaderPainter_obj::triangleBufferIndex,HX_("triangleBufferIndex",0a,6c,d7,9e)},
	{hx::fsObject /*  ::kha::graphics4::VertexBuffer */ ,(void *) &ColoredShaderPainter_obj::triangleVertexBuffer,HX_("triangleVertexBuffer",6c,c6,88,35)},
	{hx::fsObject /*  ::kha::arrays::Float32ArrayPrivate */ ,(void *) &ColoredShaderPainter_obj::triangleVertices,HX_("triangleVertices",e1,42,15,97)},
	{hx::fsObject /*  ::kha::graphics4::IndexBuffer */ ,(void *) &ColoredShaderPainter_obj::triangleIndexBuffer,HX_("triangleIndexBuffer",ca,a3,1d,39)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String ColoredShaderPainter_obj_sMemberFields[] = {
	HX_("projectionMatrix",30,88,bb,d0),
	HX_("g",67,00,00,00),
	HX_("myPipeline",ae,22,05,b9),
	HX_("projectionLocation",e4,59,25,9b),
	HX_("sourceBlend",76,ad,fa,e3),
	HX_("destinationBlend",e3,ca,bf,2e),
	HX_("get_pipeline",2b,6f,9d,00),
	HX_("set_pipeline",9f,92,96,15),
	HX_("setProjection",d1,c6,03,66),
	HX_("initBuffers",43,12,fb,69),
	HX_("setRectVertices",ff,5f,ac,73),
	HX_("setRectColors",36,38,37,6d),
	HX_("setTriVertices",c2,c3,7b,76),
	HX_("setTriColors",39,15,93,3b),
	HX_("drawBuffer",24,38,58,12),
	HX_("drawTriBuffer",e7,5f,78,80),
	HX_("fillRect",47,45,b9,6c),
	HX_("fillTriangle",6b,04,3a,92),
	HX_("endTris",63,56,28,2f),
	HX_("endRects",f4,c4,b9,e4),
	HX_("end",db,03,4d,00),
	::String(null()) };

static void ColoredShaderPainter_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::structure,"structure");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::bufferSize,"bufferSize");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::rectVertices,"rectVertices");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferSize,"triangleBufferSize");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferIndex,"triangleBufferIndex");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertexBuffer,"triangleVertexBuffer");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertices,"triangleVertices");
	HX_MARK_MEMBER_NAME(ColoredShaderPainter_obj::triangleIndexBuffer,"triangleIndexBuffer");
};

#ifdef HXCPP_VISIT_ALLOCS
static void ColoredShaderPainter_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::shaderPipeline,"shaderPipeline");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::structure,"structure");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::bufferSize,"bufferSize");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::bufferIndex,"bufferIndex");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::rectVertexBuffer,"rectVertexBuffer");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::rectVertices,"rectVertices");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::indexBuffer,"indexBuffer");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferSize,"triangleBufferSize");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleBufferIndex,"triangleBufferIndex");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertexBuffer,"triangleVertexBuffer");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleVertices,"triangleVertices");
	HX_VISIT_MEMBER_NAME(ColoredShaderPainter_obj::triangleIndexBuffer,"triangleIndexBuffer");
};

#endif

hx::Class ColoredShaderPainter_obj::__mClass;

static ::String ColoredShaderPainter_obj_sStaticFields[] = {
	HX_("shaderPipeline",67,63,91,fc),
	HX_("structure",33,54,4f,47),
	HX_("bufferSize",e1,09,64,9d),
	HX_("bufferIndex",f2,2d,60,5b),
	HX_("rectVertexBuffer",c8,6e,b4,97),
	HX_("rectVertices",3d,8d,f6,54),
	HX_("indexBuffer",b2,65,a6,f5),
	HX_("triangleBufferSize",c9,16,78,ab),
	HX_("triangleBufferIndex",0a,6c,d7,9e),
	HX_("triangleVertexBuffer",6c,c6,88,35),
	HX_("triangleVertices",e1,42,15,97),
	HX_("triangleIndexBuffer",ca,a3,1d,39),
	HX_("initShaders",7e,f0,f0,17),
	::String(null())
};

void ColoredShaderPainter_obj::__register()
{
	ColoredShaderPainter_obj _hx_dummy;
	ColoredShaderPainter_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.ColoredShaderPainter",b3,b9,9f,76);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ColoredShaderPainter_obj::__GetStatic;
	__mClass->mSetStaticField = &ColoredShaderPainter_obj::__SetStatic;
	__mClass->mMarkFunc = ColoredShaderPainter_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(ColoredShaderPainter_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(ColoredShaderPainter_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< ColoredShaderPainter_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = ColoredShaderPainter_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ColoredShaderPainter_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ColoredShaderPainter_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void ColoredShaderPainter_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_259_boot)
HXDLIN( 259)		shaderPipeline = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_260_boot)
HXDLIN( 260)		structure = null();
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_262_boot)
HXDLIN( 262)		bufferSize = 100;
            	}
{
            	HX_STACKFRAME(&_hx_pos_fa9e8f706269b90e_268_boot)
HXDLIN( 268)		triangleBufferSize = 100;
            	}
}

} // end namespace kha
} // end namespace graphics4
