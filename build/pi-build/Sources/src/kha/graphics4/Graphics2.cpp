// Generated by Haxe 4.0.0-preview.5+1aaf080
#include <hxcpp.h>

#ifndef INCLUDED_6136fc9686b3876e
#define INCLUDED_6136fc9686b3876e
#include "Kore/Simd/float32x4.h"
#endif
#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_kha_Canvas
#include <hxinc/kha/Canvas.h>
#endif
#ifndef INCLUDED_kha_Framebuffer
#include <hxinc/kha/Framebuffer.h>
#endif
#ifndef INCLUDED_kha_Image
#include <hxinc/kha/Image.h>
#endif
#ifndef INCLUDED_kha_Kravur
#include <hxinc/kha/Kravur.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Shaders
#include <hxinc/kha/Shaders.h>
#endif
#ifndef INCLUDED_kha_Video
#include <hxinc/kha/Video.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_graphics2_Graphics
#include <hxinc/kha/graphics2/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics2_ImageScaleQuality
#include <hxinc/kha/graphics2/ImageScaleQuality.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <hxinc/kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_ColoredShaderPainter
#include <hxinc/kha/graphics4/ColoredShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <hxinc/kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics
#include <hxinc/kha/graphics4/Graphics.h>
#endif
#ifndef INCLUDED_kha_graphics4_Graphics2
#include <hxinc/kha/graphics4/Graphics2.h>
#endif
#ifndef INCLUDED_kha_graphics4_ImageShaderPainter
#include <hxinc/kha/graphics4/ImageShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextShaderPainter
#include <hxinc/kha/graphics4/TextShaderPainter.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <hxinc/kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix3
#include <hxinc/kha/math/FastMatrix3.h>
#endif
#ifndef INCLUDED_kha_math_FastMatrix4
#include <hxinc/kha/math/FastMatrix4.h>
#endif
#ifndef INCLUDED_kha_math_FastVector2
#include <hxinc/kha/math/FastVector2.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_97689b4ae489993c_798_new,"kha.graphics4.Graphics2","new",0x1f2768ea,"kha.graphics4.Graphics2.new","kha/graphics4/Graphics2.hx",798,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_840_setProjection,"kha.graphics4.Graphics2","setProjection",0xf22b2fdb,"kha.graphics4.Graphics2.setProjection","kha/graphics4/Graphics2.hx",840,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_864_drawImage,"kha.graphics4.Graphics2","drawImage",0x2d9bf0c1,"kha.graphics4.Graphics2.drawImage","kha/graphics4/Graphics2.hx",864,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_905_drawScaledSubImage,"kha.graphics4.Graphics2","drawScaledSubImage",0x67aa184f,"kha.graphics4.Graphics2.drawScaledSubImage","kha/graphics4/Graphics2.hx",905,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_916_get_color,"kha.graphics4.Graphics2","get_color",0x362d69c4,"kha.graphics4.Graphics2.get_color","kha/graphics4/Graphics2.hx",916,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_920_set_color,"kha.graphics4.Graphics2","set_color",0x197e55d0,"kha.graphics4.Graphics2.set_color","kha/graphics4/Graphics2.hx",920,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_923_drawRect,"kha.graphics4.Graphics2","drawRect",0x10762a7e,"kha.graphics4.Graphics2.drawRect","kha/graphics4/Graphics2.hx",923,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_952_fillRect,"kha.graphics4.Graphics2","fillRect",0x1d1e787d,"kha.graphics4.Graphics2.fillRect","kha/graphics4/Graphics2.hx",952,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_963_drawString,"kha.graphics4.Graphics2","drawString",0xcd7490ab,"kha.graphics4.Graphics2.drawString","kha/graphics4/Graphics2.hx",963,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_970_drawCharacters,"kha.graphics4.Graphics2","drawCharacters",0x4f2cb584,"kha.graphics4.Graphics2.drawCharacters","kha/graphics4/Graphics2.hx",970,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_978_get_font,"kha.graphics4.Graphics2","get_font",0x73e04c8e,"kha.graphics4.Graphics2.get_font","kha/graphics4/Graphics2.hx",978,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_981_set_font,"kha.graphics4.Graphics2","set_font",0x223da602,"kha.graphics4.Graphics2.set_font","kha/graphics4/Graphics2.hx",981,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_987_set_fontSize,"kha.graphics4.Graphics2","set_fontSize",0x67029be3,"kha.graphics4.Graphics2.set_fontSize","kha/graphics4/Graphics2.hx",987,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_990_drawLine,"kha.graphics4.Graphics2","drawLine",0x0c81f54e,"kha.graphics4.Graphics2.drawLine","kha/graphics4/Graphics2.hx",990,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1012_fillTriangle,"kha.graphics4.Graphics2","fillTriangle",0x60580aa1,"kha.graphics4.Graphics2.fillTriangle","kha/graphics4/Graphics2.hx",1012,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1025_get_imageScaleQuality,"kha.graphics4.Graphics2","get_imageScaleQuality",0xc084b131,"kha.graphics4.Graphics2.get_imageScaleQuality","kha/graphics4/Graphics2.hx",1025,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1028_set_imageScaleQuality,"kha.graphics4.Graphics2","set_imageScaleQuality",0x148d7f3d,"kha.graphics4.Graphics2.set_imageScaleQuality","kha/graphics4/Graphics2.hx",1028,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1037_get_mipmapScaleQuality,"kha.graphics4.Graphics2","get_mipmapScaleQuality",0xa8eee7fc,"kha.graphics4.Graphics2.get_mipmapScaleQuality","kha/graphics4/Graphics2.hx",1037,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1040_set_mipmapScaleQuality,"kha.graphics4.Graphics2","set_mipmapScaleQuality",0xdc9a6470,"kha.graphics4.Graphics2.set_mipmapScaleQuality","kha/graphics4/Graphics2.hx",1040,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1046_setPipeline,"kha.graphics4.Graphics2","setPipeline",0x3232b76e,"kha.graphics4.Graphics2.setPipeline","kha/graphics4/Graphics2.hx",1046,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1054_scissor,"kha.graphics4.Graphics2","scissor",0xe6b2cda6,"kha.graphics4.Graphics2.scissor","kha/graphics4/Graphics2.hx",1054,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1059_disableScissor,"kha.graphics4.Graphics2","disableScissor",0x18baf2ca,"kha.graphics4.Graphics2.disableScissor","kha/graphics4/Graphics2.hx",1059,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1064_begin,"kha.graphics4.Graphics2","begin",0xdda83933,"kha.graphics4.Graphics2.begin","kha/graphics4/Graphics2.hx",1064,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1070_clear,"kha.graphics4.Graphics2","clear",0x75adc097,"kha.graphics4.Graphics2.clear","kha/graphics4/Graphics2.hx",1070,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1075_flush,"kha.graphics4.Graphics2","flush",0x2fedb1ce,"kha.graphics4.Graphics2.flush","kha/graphics4/Graphics2.hx",1075,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1081_end,"kha.graphics4.Graphics2","end",0x1f209c65,"kha.graphics4.Graphics2.end","kha/graphics4/Graphics2.hx",1081,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1086_drawVideoInternal,"kha.graphics4.Graphics2","drawVideoInternal",0xe071523e,"kha.graphics4.Graphics2.drawVideoInternal","kha/graphics4/Graphics2.hx",1086,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1090_drawVideo,"kha.graphics4.Graphics2","drawVideo",0xa72ee5e1,"kha.graphics4.Graphics2.drawVideo","kha/graphics4/Graphics2.hx",1090,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_829_upperPowerOfTwo,"kha.graphics4.Graphics2","upperPowerOfTwo",0x6f9869fc,"kha.graphics4.Graphics2.upperPowerOfTwo","kha/graphics4/Graphics2.hx",829,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1096_createImageVertexStructure,"kha.graphics4.Graphics2","createImageVertexStructure",0x36f524e6,"kha.graphics4.Graphics2.createImageVertexStructure","kha/graphics4/Graphics2.hx",1096,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1104_createImagePipeline,"kha.graphics4.Graphics2","createImagePipeline",0x9c6ff18b,"kha.graphics4.Graphics2.createImagePipeline","kha/graphics4/Graphics2.hx",1104,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1116_createColoredVertexStructure,"kha.graphics4.Graphics2","createColoredVertexStructure",0x7d5e181f,"kha.graphics4.Graphics2.createColoredVertexStructure","kha/graphics4/Graphics2.hx",1116,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1123_createColoredPipeline,"kha.graphics4.Graphics2","createColoredPipeline",0x9f695132,"kha.graphics4.Graphics2.createColoredPipeline","kha/graphics4/Graphics2.hx",1123,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1135_createTextVertexStructure,"kha.graphics4.Graphics2","createTextVertexStructure",0x0c9f0070,"kha.graphics4.Graphics2.createTextVertexStructure","kha/graphics4/Graphics2.hx",1135,0x0c1de808)
HX_LOCAL_STACK_FRAME(_hx_pos_97689b4ae489993c_1143_createTextPipeline,"kha.graphics4.Graphics2","createTextPipeline",0xf90b08c1,"kha.graphics4.Graphics2.createTextPipeline","kha/graphics4/Graphics2.hx",1143,0x0c1de808)
namespace kha{
namespace graphics4{

void Graphics2_obj::__construct(::Dynamic canvas){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_798_new)
HXLINE(1034)		this->myMipmapScaleQuality = ::kha::graphics2::ImageScaleQuality_obj::High_dyn();
HXLINE(1022)		this->myImageScaleQuality = ::kha::graphics2::ImageScaleQuality_obj::High_dyn();
HXLINE( 810)		super::__construct();
HXLINE( 811)		this->set_color(-1);
HXLINE( 812)		this->canvas = canvas;
HXLINE( 813)		this->g = ::kha::Canvas_obj::get_g4(canvas);
HXLINE( 814)		this->imagePainter =  ::kha::graphics4::ImageShaderPainter_obj::__alloc( HX_CTX ,this->g);
HXLINE( 815)		this->coloredPainter =  ::kha::graphics4::ColoredShaderPainter_obj::__alloc( HX_CTX ,this->g);
HXLINE( 816)		this->textPainter =  ::kha::graphics4::TextShaderPainter_obj::__alloc( HX_CTX ,this->g);
HXLINE( 817)		this->textPainter->fontSize = this->get_fontSize();
HXLINE( 818)		this->projectionMatrix =  ::kha::math::FastMatrix4_obj::__alloc( HX_CTX ,( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(0) ),( (float)(1) ));
HXLINE( 819)		this->setProjection();
HXLINE( 821)		if (hx::IsNull( ::kha::graphics4::Graphics2_obj::videoPipeline )) {
HXLINE( 822)			::kha::graphics4::Graphics2_obj::videoPipeline = ::kha::graphics4::Graphics2_obj::createImagePipeline(::kha::graphics4::Graphics2_obj::createImageVertexStructure());
HXLINE( 823)			::kha::graphics4::Graphics2_obj::videoPipeline->fragmentShader = ::kha::Shaders_obj::painter_video_frag;
HXLINE( 824)			::kha::graphics4::Graphics2_obj::videoPipeline->vertexShader = ::kha::Shaders_obj::painter_video_vert;
HXLINE( 825)			::kha::graphics4::Graphics2_obj::videoPipeline->compile();
            		}
            	}

Dynamic Graphics2_obj::__CreateEmpty() { return new Graphics2_obj; }

void *Graphics2_obj::_hx_vtable = 0;

Dynamic Graphics2_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Graphics2_obj > _hx_result = new Graphics2_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Graphics2_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2f3aa9a2) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x2f3aa9a2;
	} else {
		return inClassId==(int)0x3f458a72;
	}
}

void Graphics2_obj::setProjection(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_840_setProjection)
HXLINE( 841)		int width = ::kha::Canvas_obj::get_width(this->canvas);
HXLINE( 842)		int height = ::kha::Canvas_obj::get_height(this->canvas);
HXLINE( 843)		if (::Std_obj::is(this->canvas,hx::ClassOf< ::kha::Framebuffer >())) {
HXLINE( 844)			 ::kha::math::FastMatrix4 _this = this->projectionMatrix;
HXDLIN( 844)			float tx = ( (float)((( (Float)(-(width)) ) / ( (Float)(width) ))) );
HXDLIN( 844)			float ty = ( (float)((( (Float)(-(height)) ) / ( (Float)((( (float)(0) ) - ( (float)(height) ))) ))) );
HXDLIN( 844)			float tz = ( (float)(((Float)-1.0002000200020003)) );
HXDLIN( 844)			float m__00 = ( (float)((( (Float)(2) ) / ( (Float)(width) ))) );
HXDLIN( 844)			float m__10 = ( (float)(0) );
HXDLIN( 844)			float m__20 = ( (float)(0) );
HXDLIN( 844)			float m__30 = tx;
HXDLIN( 844)			float m__01 = ( (float)(0) );
HXDLIN( 844)			float m__11 = ( (float)((( (Float)(2) ) / ( (Float)((( (float)(0) ) - ( (float)(height) ))) ))) );
HXDLIN( 844)			float m__21 = ( (float)(0) );
HXDLIN( 844)			float m__31 = ty;
HXDLIN( 844)			float m__02 = ( (float)(0) );
HXDLIN( 844)			float m__12 = ( (float)(0) );
HXDLIN( 844)			float m__22 = ( (float)(((Float)-0.002000200020002)) );
HXDLIN( 844)			float m__32 = tz;
HXDLIN( 844)			float m__03 = ( (float)(0) );
HXDLIN( 844)			float m__13 = ( (float)(0) );
HXDLIN( 844)			float m__23 = ( (float)(0) );
HXDLIN( 844)			float m__33 = ( (float)(1) );
HXDLIN( 844)			_this->_00 = m__00;
HXDLIN( 844)			_this->_10 = m__10;
HXDLIN( 844)			_this->_20 = m__20;
HXDLIN( 844)			_this->_30 = m__30;
HXDLIN( 844)			_this->_01 = m__01;
HXDLIN( 844)			_this->_11 = m__11;
HXDLIN( 844)			_this->_21 = m__21;
HXDLIN( 844)			_this->_31 = m__31;
HXDLIN( 844)			_this->_02 = m__02;
HXDLIN( 844)			_this->_12 = m__12;
HXDLIN( 844)			_this->_22 = m__22;
HXDLIN( 844)			_this->_32 = m__32;
HXDLIN( 844)			_this->_03 = m__03;
HXDLIN( 844)			_this->_13 = m__13;
HXDLIN( 844)			_this->_23 = m__23;
HXDLIN( 844)			_this->_33 = m__33;
            		}
            		else {
HXLINE( 847)			if (!(::kha::Image_obj::get_nonPow2Supported())) {
HXLINE( 848)				width = ::kha::graphics4::Graphics2_obj::upperPowerOfTwo(width);
HXLINE( 849)				height = ::kha::graphics4::Graphics2_obj::upperPowerOfTwo(height);
            			}
HXLINE( 851)			if (::kha::graphics4::Graphics_obj::renderTargetsInvertedY(this->g)) {
HXLINE( 852)				 ::kha::math::FastMatrix4 _this1 = this->projectionMatrix;
HXDLIN( 852)				float tx1 = ( (float)((( (Float)(-(width)) ) / ( (Float)(width) ))) );
HXDLIN( 852)				float ty1 = ( (float)((( (Float)(-(height)) ) / ( (Float)(height) ))) );
HXDLIN( 852)				float tz1 = ( (float)(((Float)-1.0002000200020003)) );
HXDLIN( 852)				float m__001 = ( (float)((( (Float)(2) ) / ( (Float)(width) ))) );
HXDLIN( 852)				float m__101 = ( (float)(0) );
HXDLIN( 852)				float m__201 = ( (float)(0) );
HXDLIN( 852)				float m__301 = tx1;
HXDLIN( 852)				float m__011 = ( (float)(0) );
HXDLIN( 852)				float m__111 = ( (float)((( (Float)(2) ) / ( (Float)(height) ))) );
HXDLIN( 852)				float m__211 = ( (float)(0) );
HXDLIN( 852)				float m__311 = ty1;
HXDLIN( 852)				float m__021 = ( (float)(0) );
HXDLIN( 852)				float m__121 = ( (float)(0) );
HXDLIN( 852)				float m__221 = ( (float)(((Float)-0.002000200020002)) );
HXDLIN( 852)				float m__321 = tz1;
HXDLIN( 852)				float m__031 = ( (float)(0) );
HXDLIN( 852)				float m__131 = ( (float)(0) );
HXDLIN( 852)				float m__231 = ( (float)(0) );
HXDLIN( 852)				float m__331 = ( (float)(1) );
HXDLIN( 852)				_this1->_00 = m__001;
HXDLIN( 852)				_this1->_10 = m__101;
HXDLIN( 852)				_this1->_20 = m__201;
HXDLIN( 852)				_this1->_30 = m__301;
HXDLIN( 852)				_this1->_01 = m__011;
HXDLIN( 852)				_this1->_11 = m__111;
HXDLIN( 852)				_this1->_21 = m__211;
HXDLIN( 852)				_this1->_31 = m__311;
HXDLIN( 852)				_this1->_02 = m__021;
HXDLIN( 852)				_this1->_12 = m__121;
HXDLIN( 852)				_this1->_22 = m__221;
HXDLIN( 852)				_this1->_32 = m__321;
HXDLIN( 852)				_this1->_03 = m__031;
HXDLIN( 852)				_this1->_13 = m__131;
HXDLIN( 852)				_this1->_23 = m__231;
HXDLIN( 852)				_this1->_33 = m__331;
            			}
            			else {
HXLINE( 855)				 ::kha::math::FastMatrix4 _this2 = this->projectionMatrix;
HXDLIN( 855)				float tx2 = ( (float)((( (Float)(-(width)) ) / ( (Float)(width) ))) );
HXDLIN( 855)				float ty2 = ( (float)((( (Float)(-(height)) ) / ( (Float)((( (float)(0) ) - ( (float)(height) ))) ))) );
HXDLIN( 855)				float tz2 = ( (float)(((Float)-1.0002000200020003)) );
HXDLIN( 855)				float m__002 = ( (float)((( (Float)(2) ) / ( (Float)(width) ))) );
HXDLIN( 855)				float m__102 = ( (float)(0) );
HXDLIN( 855)				float m__202 = ( (float)(0) );
HXDLIN( 855)				float m__302 = tx2;
HXDLIN( 855)				float m__012 = ( (float)(0) );
HXDLIN( 855)				float m__112 = ( (float)((( (Float)(2) ) / ( (Float)((( (float)(0) ) - ( (float)(height) ))) ))) );
HXDLIN( 855)				float m__212 = ( (float)(0) );
HXDLIN( 855)				float m__312 = ty2;
HXDLIN( 855)				float m__022 = ( (float)(0) );
HXDLIN( 855)				float m__122 = ( (float)(0) );
HXDLIN( 855)				float m__222 = ( (float)(((Float)-0.002000200020002)) );
HXDLIN( 855)				float m__322 = tz2;
HXDLIN( 855)				float m__032 = ( (float)(0) );
HXDLIN( 855)				float m__132 = ( (float)(0) );
HXDLIN( 855)				float m__232 = ( (float)(0) );
HXDLIN( 855)				float m__332 = ( (float)(1) );
HXDLIN( 855)				_this2->_00 = m__002;
HXDLIN( 855)				_this2->_10 = m__102;
HXDLIN( 855)				_this2->_20 = m__202;
HXDLIN( 855)				_this2->_30 = m__302;
HXDLIN( 855)				_this2->_01 = m__012;
HXDLIN( 855)				_this2->_11 = m__112;
HXDLIN( 855)				_this2->_21 = m__212;
HXDLIN( 855)				_this2->_31 = m__312;
HXDLIN( 855)				_this2->_02 = m__022;
HXDLIN( 855)				_this2->_12 = m__122;
HXDLIN( 855)				_this2->_22 = m__222;
HXDLIN( 855)				_this2->_32 = m__322;
HXDLIN( 855)				_this2->_03 = m__032;
HXDLIN( 855)				_this2->_13 = m__132;
HXDLIN( 855)				_this2->_23 = m__232;
HXDLIN( 855)				_this2->_33 = m__332;
            			}
            		}
HXLINE( 858)		this->imagePainter->setProjection(this->projectionMatrix);
HXLINE( 859)		this->coloredPainter->setProjection(this->projectionMatrix);
HXLINE( 860)		this->textPainter->setProjection(this->projectionMatrix);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,setProjection,(void))

void Graphics2_obj::drawImage( ::kha::Image img,float x,float y){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_864_drawImage)
HXLINE( 865)		{
HXLINE( 865)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 865)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 865)				_this->drawTriBuffer(false);
            			}
HXDLIN( 865)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 865)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 866)		this->textPainter->end();
HXLINE( 867)		float xw = (x + img->get_width());
HXLINE( 868)		float yh = (y + img->get_height());
HXLINE( 870)		 Kore::float32x4 xx = Kore::load(x,x,xw,xw);
HXLINE( 871)		 Kore::float32x4 yy = Kore::load(yh,y,y,yh);
HXLINE( 873)		 Kore::float32x4 _00 = Kore::loadAll(this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_00);
HXLINE( 874)		 Kore::float32x4 _01 = Kore::loadAll(this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_01);
HXLINE( 875)		 Kore::float32x4 _02 = Kore::loadAll(this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_02);
HXLINE( 876)		 Kore::float32x4 _10 = Kore::loadAll(this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_10);
HXLINE( 877)		 Kore::float32x4 _11 = Kore::loadAll(this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_11);
HXLINE( 878)		 Kore::float32x4 _12 = Kore::loadAll(this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_12);
HXLINE( 879)		 Kore::float32x4 _20 = Kore::loadAll(this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_20);
HXLINE( 880)		 Kore::float32x4 _21 = Kore::loadAll(this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_21);
HXLINE( 881)		 Kore::float32x4 _22 = Kore::loadAll(this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >()->_22);
HXLINE( 884)		 Kore::float32x4 w = Kore::mul(_02,xx);
HXDLIN( 884)		 Kore::float32x4 w1 = Kore::add(Kore::add(w,Kore::mul(_12,yy)),_22);
HXLINE( 885)		 Kore::float32x4 px = Kore::mul(_00,xx);
HXDLIN( 885)		 Kore::float32x4 px1 = Kore::div(Kore::add(Kore::add(px,Kore::mul(_10,yy)),_20),w1);
HXLINE( 886)		 Kore::float32x4 py = Kore::mul(_01,xx);
HXDLIN( 886)		 Kore::float32x4 py1 = Kore::div(Kore::add(Kore::add(py,Kore::mul(_11,yy)),_21),w1);
HXLINE( 888)		{
HXLINE( 888)			 ::kha::graphics4::ImageShaderPainter _this1 = this->imagePainter;
HXDLIN( 888)			float bottomleftx = ( (float)(Kore::get(px1,0)) );
HXDLIN( 888)			float bottomlefty = ( (float)(Kore::get(py1,0)) );
HXDLIN( 888)			float topleftx = ( (float)(Kore::get(px1,1)) );
HXDLIN( 888)			float toplefty = ( (float)(Kore::get(py1,1)) );
HXDLIN( 888)			float toprightx = ( (float)(Kore::get(px1,2)) );
HXDLIN( 888)			float toprighty = ( (float)(Kore::get(py1,2)) );
HXDLIN( 888)			float bottomrightx = ( (float)(Kore::get(px1,3)) );
HXDLIN( 888)			float bottomrighty = ( (float)(Kore::get(py1,3)) );
HXDLIN( 888)			float opacity = ( (float)(this->get_opacity()) );
HXDLIN( 888)			int color = this->get_color();
HXDLIN( 888)			 ::kha::Image tex = img;
HXDLIN( 888)			bool _hx_tmp;
HXDLIN( 888)			if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex + 1) < 1500)) {
HXLINE( 888)				if (hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 888)					_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            				}
            				else {
HXLINE( 888)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 888)				_hx_tmp = true;
            			}
HXDLIN( 888)			if (_hx_tmp) {
HXLINE( 888)				_this1->drawBuffer();
            			}
HXDLIN( 888)			{
HXLINE( 888)				float r = (( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 888)				float g = (( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 888)				float b = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 888)				float a = ((( (float)(hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )) * opacity);
HXDLIN( 888)				int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 5),r);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 6),g);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 7),b);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 8),a);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 14),r);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 15),g);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 16),b);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 17),a);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 23),r);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 24),g);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 25),b);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 26),a);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 32),r);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 33),g);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 34),b);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 35),a);
            			}
HXDLIN( 888)			{
HXLINE( 888)				int right = tex->get_width();
HXDLIN( 888)				float right1 = ( (float)((( (Float)(right) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 888)				int bottom = tex->get_height();
HXDLIN( 888)				float bottom1 = ( (float)((( (Float)(bottom) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 888)				int baseIndex1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 3),( (float)(0) ));
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 4),bottom1);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 12),( (float)(0) ));
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 13),( (float)(0) ));
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 21),right1);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 22),( (float)(0) ));
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 30),right1);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 31),bottom1);
            			}
HXDLIN( 888)			{
HXLINE( 888)				int baseIndex2 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,bottomleftx);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 1),bottomlefty);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 2),( (float)(((Float)-5.0)) ));
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 9),topleftx);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 10),toplefty);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 11),( (float)(((Float)-5.0)) ));
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 18),toprightx);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 19),toprighty);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 20),( (float)(((Float)-5.0)) ));
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 27),bottomrightx);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 28),bottomrighty);
HXDLIN( 888)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 29),( (float)(((Float)-5.0)) ));
            			}
HXDLIN( 888)			++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXDLIN( 888)			::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            		}
            	}


void Graphics2_obj::drawScaledSubImage( ::kha::Image img,float sx,float sy,float sw,float sh,float dx,float dy,float dw,float dh){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_905_drawScaledSubImage)
HXLINE( 906)		{
HXLINE( 906)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 906)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 906)				_this->drawTriBuffer(false);
            			}
HXDLIN( 906)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 906)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 907)		this->textPainter->end();
HXLINE( 908)		 ::kha::math::FastMatrix3 _this1 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 908)		float value_x = dx;
HXDLIN( 908)		float value_y = (dy + dh);
HXDLIN( 908)		float w = (((_this1->_02 * value_x) + (_this1->_12 * value_y)) + _this1->_22);
HXDLIN( 908)		Float x = (( (Float)((((_this1->_00 * value_x) + (_this1->_10 * value_y)) + _this1->_20)) ) / ( (Float)(w) ));
HXDLIN( 908)		Float y = (( (Float)((((_this1->_01 * value_x) + (_this1->_11 * value_y)) + _this1->_21)) ) / ( (Float)(w) ));
HXDLIN( 908)		float p1_x = ( (float)(x) );
HXDLIN( 908)		float p1_y = ( (float)(y) );
HXLINE( 909)		 ::kha::math::FastMatrix3 _this2 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 909)		float value_x1 = dx;
HXDLIN( 909)		float value_y1 = dy;
HXDLIN( 909)		float w1 = (((_this2->_02 * value_x1) + (_this2->_12 * value_y1)) + _this2->_22);
HXDLIN( 909)		Float x1 = (( (Float)((((_this2->_00 * value_x1) + (_this2->_10 * value_y1)) + _this2->_20)) ) / ( (Float)(w1) ));
HXDLIN( 909)		Float y1 = (( (Float)((((_this2->_01 * value_x1) + (_this2->_11 * value_y1)) + _this2->_21)) ) / ( (Float)(w1) ));
HXDLIN( 909)		float p2_x = ( (float)(x1) );
HXDLIN( 909)		float p2_y = ( (float)(y1) );
HXLINE( 910)		 ::kha::math::FastMatrix3 _this3 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 910)		float value_x2 = (dx + dw);
HXDLIN( 910)		float value_y2 = dy;
HXDLIN( 910)		float w2 = (((_this3->_02 * value_x2) + (_this3->_12 * value_y2)) + _this3->_22);
HXDLIN( 910)		Float x2 = (( (Float)((((_this3->_00 * value_x2) + (_this3->_10 * value_y2)) + _this3->_20)) ) / ( (Float)(w2) ));
HXDLIN( 910)		Float y2 = (( (Float)((((_this3->_01 * value_x2) + (_this3->_11 * value_y2)) + _this3->_21)) ) / ( (Float)(w2) ));
HXDLIN( 910)		float p3_x = ( (float)(x2) );
HXDLIN( 910)		float p3_y = ( (float)(y2) );
HXLINE( 911)		 ::kha::math::FastMatrix3 _this4 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 911)		float value_x3 = (dx + dw);
HXDLIN( 911)		float value_y3 = (dy + dh);
HXDLIN( 911)		float w3 = (((_this4->_02 * value_x3) + (_this4->_12 * value_y3)) + _this4->_22);
HXDLIN( 911)		Float x3 = (( (Float)((((_this4->_00 * value_x3) + (_this4->_10 * value_y3)) + _this4->_20)) ) / ( (Float)(w3) ));
HXDLIN( 911)		Float y3 = (( (Float)((((_this4->_01 * value_x3) + (_this4->_11 * value_y3)) + _this4->_21)) ) / ( (Float)(w3) ));
HXDLIN( 911)		float p4_x = ( (float)(x3) );
HXDLIN( 911)		float p4_y = ( (float)(y3) );
HXLINE( 912)		{
HXLINE( 912)			 ::kha::graphics4::ImageShaderPainter _this5 = this->imagePainter;
HXDLIN( 912)			float opacity = ( (float)(this->get_opacity()) );
HXDLIN( 912)			int color = this->get_color();
HXDLIN( 912)			 ::kha::Image tex = img;
HXDLIN( 912)			bool _hx_tmp;
HXDLIN( 912)			if (((::kha::graphics4::ImageShaderPainter_obj::bufferIndex + 1) < 1500)) {
HXLINE( 912)				if (hx::IsNotNull( ::kha::graphics4::ImageShaderPainter_obj::lastTexture )) {
HXLINE( 912)					_hx_tmp = hx::IsNotEq( tex,::kha::graphics4::ImageShaderPainter_obj::lastTexture );
            				}
            				else {
HXLINE( 912)					_hx_tmp = false;
            				}
            			}
            			else {
HXLINE( 912)				_hx_tmp = true;
            			}
HXDLIN( 912)			if (_hx_tmp) {
HXLINE( 912)				_this5->drawBuffer();
            			}
HXDLIN( 912)			{
HXLINE( 912)				float left = ( (float)((( (Float)(sx) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 912)				float top = ( (float)((( (Float)(sy) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 912)				float right = ( (float)((( (Float)((sx + sw)) ) / ( (Float)(tex->get_realWidth()) ))) );
HXDLIN( 912)				float bottom = ( (float)((( (Float)((sy + sh)) ) / ( (Float)(tex->get_realHeight()) ))) );
HXDLIN( 912)				int baseIndex = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 3),left);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 4),bottom);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 12),left);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 13),top);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 21),right);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 22),top);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 30),right);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex + 31),bottom);
            			}
HXDLIN( 912)			{
HXLINE( 912)				float r = (( (float)(hx::UShr((color & 16711680),16)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 912)				float g = (( (float)(hx::UShr((color & 65280),8)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 912)				float b = (( (float)((color & 255)) ) * ( (float)(((Float)0.00392156862745098)) ));
HXDLIN( 912)				float a = ((( (float)(hx::UShr(color,24)) ) * ( (float)(((Float)0.00392156862745098)) )) * opacity);
HXDLIN( 912)				int baseIndex1 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 5),r);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 6),g);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 7),b);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 8),a);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 14),r);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 15),g);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 16),b);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 17),a);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 23),r);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 24),g);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 25),b);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 26),a);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 32),r);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 33),g);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 34),b);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex1 + 35),a);
            			}
HXDLIN( 912)			{
HXLINE( 912)				int baseIndex2 = ((::kha::graphics4::ImageShaderPainter_obj::bufferIndex * 9) * 4);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set(baseIndex2,p1_x);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 1),p1_y);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 2),( (float)(((Float)-5.0)) ));
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 9),p2_x);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 10),p2_y);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 11),( (float)(((Float)-5.0)) ));
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 18),p3_x);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 19),p3_y);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 20),( (float)(((Float)-5.0)) ));
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 27),p4_x);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 28),p4_y);
HXDLIN( 912)				::kha::graphics4::ImageShaderPainter_obj::rectVertices->self.set((baseIndex2 + 29),( (float)(((Float)-5.0)) ));
            			}
HXDLIN( 912)			++::kha::graphics4::ImageShaderPainter_obj::bufferIndex;
HXDLIN( 912)			::kha::graphics4::ImageShaderPainter_obj::lastTexture = tex;
            		}
            	}


int Graphics2_obj::get_color(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_916_get_color)
HXDLIN( 916)		return this->myColor;
            	}


int Graphics2_obj::set_color(int color){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_920_set_color)
HXDLIN( 920)		return (this->myColor = color);
            	}


void Graphics2_obj::drawRect(Float x,Float y,Float width,Float height,hx::Null< Float >  __o_strength){
            		Float strength = __o_strength.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_923_drawRect)
HXLINE( 924)		this->imagePainter->end();
HXLINE( 925)		this->textPainter->end();
HXLINE( 927)		 ::kha::math::FastMatrix3 _this = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 927)		float value_x = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 927)		float value_y = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 927)		float w = (((_this->_02 * value_x) + (_this->_12 * value_y)) + _this->_22);
HXDLIN( 927)		Float x1 = (( (Float)((((_this->_00 * value_x) + (_this->_10 * value_y)) + _this->_20)) ) / ( (Float)(w) ));
HXDLIN( 927)		Float y1 = (( (Float)((((_this->_01 * value_x) + (_this->_11 * value_y)) + _this->_21)) ) / ( (Float)(w) ));
HXDLIN( 927)		 ::kha::math::FastVector2 p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x1,y1);
HXLINE( 928)		 ::kha::math::FastMatrix3 _this1 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 928)		float value_x1 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 928)		float value_y1 = ( (float)((y - (strength / ( (Float)(2) )))) );
HXDLIN( 928)		float w1 = (((_this1->_02 * value_x1) + (_this1->_12 * value_y1)) + _this1->_22);
HXDLIN( 928)		Float x2 = (( (Float)((((_this1->_00 * value_x1) + (_this1->_10 * value_y1)) + _this1->_20)) ) / ( (Float)(w1) ));
HXDLIN( 928)		Float y2 = (( (Float)((((_this1->_01 * value_x1) + (_this1->_11 * value_y1)) + _this1->_21)) ) / ( (Float)(w1) ));
HXDLIN( 928)		 ::kha::math::FastVector2 p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x2,y2);
HXLINE( 929)		 ::kha::math::FastMatrix3 _this2 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 929)		float value_x2 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 929)		float value_y2 = ( (float)((y - (strength / ( (Float)(2) )))) );
HXDLIN( 929)		float w2 = (((_this2->_02 * value_x2) + (_this2->_12 * value_y2)) + _this2->_22);
HXDLIN( 929)		Float x3 = (( (Float)((((_this2->_00 * value_x2) + (_this2->_10 * value_y2)) + _this2->_20)) ) / ( (Float)(w2) ));
HXDLIN( 929)		Float y3 = (( (Float)((((_this2->_01 * value_x2) + (_this2->_11 * value_y2)) + _this2->_21)) ) / ( (Float)(w2) ));
HXDLIN( 929)		 ::kha::math::FastVector2 p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x3,y3);
HXLINE( 930)		 ::kha::math::FastMatrix3 _this3 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 930)		float value_x3 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 930)		float value_y3 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 930)		float w3 = (((_this3->_02 * value_x3) + (_this3->_12 * value_y3)) + _this3->_22);
HXDLIN( 930)		Float x4 = (( (Float)((((_this3->_00 * value_x3) + (_this3->_10 * value_y3)) + _this3->_20)) ) / ( (Float)(w3) ));
HXDLIN( 930)		Float y4 = (( (Float)((((_this3->_01 * value_x3) + (_this3->_11 * value_y3)) + _this3->_21)) ) / ( (Float)(w3) ));
HXDLIN( 930)		 ::kha::math::FastVector2 p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x4,y4);
HXLINE( 931)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN( 931)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 931)		int _hx_tmp2 = this->get_color();
HXDLIN( 931)		_hx_tmp->fillRect(( (float)(_hx_tmp1) ),_hx_tmp2,( (Float)(p1->x) ),( (Float)(p1->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p3->x) ),( (Float)(p3->y) ),( (Float)(p4->x) ),( (Float)(p4->y) ));
HXLINE( 933)		 ::kha::math::FastMatrix3 _this4 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 933)		float value_x4 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 933)		float value_y4 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 933)		float w4 = (((_this4->_02 * value_x4) + (_this4->_12 * value_y4)) + _this4->_22);
HXDLIN( 933)		Float x5 = (( (Float)((((_this4->_00 * value_x4) + (_this4->_10 * value_y4)) + _this4->_20)) ) / ( (Float)(w4) ));
HXDLIN( 933)		Float y5 = (( (Float)((((_this4->_01 * value_x4) + (_this4->_11 * value_y4)) + _this4->_21)) ) / ( (Float)(w4) ));
HXDLIN( 933)		p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x5,y5);
HXLINE( 934)		 ::kha::math::FastMatrix3 _this5 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 934)		float value_x5 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 934)		float value_y5 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 934)		float w5 = (((_this5->_02 * value_x5) + (_this5->_12 * value_y5)) + _this5->_22);
HXDLIN( 934)		Float x6 = (( (Float)((((_this5->_00 * value_x5) + (_this5->_10 * value_y5)) + _this5->_20)) ) / ( (Float)(w5) ));
HXDLIN( 934)		Float y6 = (( (Float)((((_this5->_01 * value_x5) + (_this5->_11 * value_y5)) + _this5->_21)) ) / ( (Float)(w5) ));
HXDLIN( 934)		p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x6,y6);
HXLINE( 935)		 ::kha::math::FastMatrix3 _this6 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 935)		float value_x6 = ( (float)((x + (strength / ( (Float)(2) )))) );
HXDLIN( 935)		float value_y6 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 935)		float w6 = (((_this6->_02 * value_x6) + (_this6->_12 * value_y6)) + _this6->_22);
HXDLIN( 935)		Float x7 = (( (Float)((((_this6->_00 * value_x6) + (_this6->_10 * value_y6)) + _this6->_20)) ) / ( (Float)(w6) ));
HXDLIN( 935)		Float y7 = (( (Float)((((_this6->_01 * value_x6) + (_this6->_11 * value_y6)) + _this6->_21)) ) / ( (Float)(w6) ));
HXDLIN( 935)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x7,y7);
HXLINE( 936)		 ::kha::math::FastMatrix3 _this7 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 936)		float value_x7 = ( (float)((x + (strength / ( (Float)(2) )))) );
HXDLIN( 936)		float value_y7 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 936)		float w7 = (((_this7->_02 * value_x7) + (_this7->_12 * value_y7)) + _this7->_22);
HXDLIN( 936)		Float x8 = (( (Float)((((_this7->_00 * value_x7) + (_this7->_10 * value_y7)) + _this7->_20)) ) / ( (Float)(w7) ));
HXDLIN( 936)		Float y8 = (( (Float)((((_this7->_01 * value_x7) + (_this7->_11 * value_y7)) + _this7->_21)) ) / ( (Float)(w7) ));
HXDLIN( 936)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x8,y8);
HXLINE( 937)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp3 = this->coloredPainter;
HXDLIN( 937)		Float _hx_tmp4 = this->get_opacity();
HXDLIN( 937)		int _hx_tmp5 = this->get_color();
HXDLIN( 937)		_hx_tmp3->fillRect(( (float)(_hx_tmp4) ),_hx_tmp5,( (Float)(p1->x) ),( (Float)(p1->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p3->x) ),( (Float)(p3->y) ),( (Float)(p4->x) ),( (Float)(p4->y) ));
HXLINE( 939)		 ::kha::math::FastMatrix3 _this8 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 939)		float value_x8 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 939)		float value_y8 = ( (float)(((y + height) + (strength / ( (Float)(2) )))) );
HXDLIN( 939)		float w8 = (((_this8->_02 * value_x8) + (_this8->_12 * value_y8)) + _this8->_22);
HXDLIN( 939)		Float x9 = (( (Float)((((_this8->_00 * value_x8) + (_this8->_10 * value_y8)) + _this8->_20)) ) / ( (Float)(w8) ));
HXDLIN( 939)		Float y9 = (( (Float)((((_this8->_01 * value_x8) + (_this8->_11 * value_y8)) + _this8->_21)) ) / ( (Float)(w8) ));
HXDLIN( 939)		p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x9,y9);
HXLINE( 940)		 ::kha::math::FastMatrix3 _this9 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 940)		float value_x9 = ( (float)((x - (strength / ( (Float)(2) )))) );
HXDLIN( 940)		float value_y9 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 940)		float w9 = (((_this9->_02 * value_x9) + (_this9->_12 * value_y9)) + _this9->_22);
HXDLIN( 940)		Float x10 = (( (Float)((((_this9->_00 * value_x9) + (_this9->_10 * value_y9)) + _this9->_20)) ) / ( (Float)(w9) ));
HXDLIN( 940)		Float y10 = (( (Float)((((_this9->_01 * value_x9) + (_this9->_11 * value_y9)) + _this9->_21)) ) / ( (Float)(w9) ));
HXDLIN( 940)		p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x10,y10);
HXLINE( 941)		 ::kha::math::FastMatrix3 _this10 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 941)		float value_x10 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 941)		float value_y10 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 941)		float w10 = (((_this10->_02 * value_x10) + (_this10->_12 * value_y10)) + _this10->_22);
HXDLIN( 941)		Float x11 = (( (Float)((((_this10->_00 * value_x10) + (_this10->_10 * value_y10)) + _this10->_20)) ) / ( (Float)(w10) ));
HXDLIN( 941)		Float y11 = (( (Float)((((_this10->_01 * value_x10) + (_this10->_11 * value_y10)) + _this10->_21)) ) / ( (Float)(w10) ));
HXDLIN( 941)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x11,y11);
HXLINE( 942)		 ::kha::math::FastMatrix3 _this11 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 942)		float value_x11 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 942)		float value_y11 = ( (float)(((y + height) + (strength / ( (Float)(2) )))) );
HXDLIN( 942)		float w11 = (((_this11->_02 * value_x11) + (_this11->_12 * value_y11)) + _this11->_22);
HXDLIN( 942)		Float x12 = (( (Float)((((_this11->_00 * value_x11) + (_this11->_10 * value_y11)) + _this11->_20)) ) / ( (Float)(w11) ));
HXDLIN( 942)		Float y12 = (( (Float)((((_this11->_01 * value_x11) + (_this11->_11 * value_y11)) + _this11->_21)) ) / ( (Float)(w11) ));
HXDLIN( 942)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x12,y12);
HXLINE( 943)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp6 = this->coloredPainter;
HXDLIN( 943)		Float _hx_tmp7 = this->get_opacity();
HXDLIN( 943)		int _hx_tmp8 = this->get_color();
HXDLIN( 943)		_hx_tmp6->fillRect(( (float)(_hx_tmp7) ),_hx_tmp8,( (Float)(p1->x) ),( (Float)(p1->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p3->x) ),( (Float)(p3->y) ),( (Float)(p4->x) ),( (Float)(p4->y) ));
HXLINE( 945)		 ::kha::math::FastMatrix3 _this12 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 945)		float value_x12 = ( (float)(((x + width) - (strength / ( (Float)(2) )))) );
HXDLIN( 945)		float value_y12 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 945)		float w12 = (((_this12->_02 * value_x12) + (_this12->_12 * value_y12)) + _this12->_22);
HXDLIN( 945)		Float x13 = (( (Float)((((_this12->_00 * value_x12) + (_this12->_10 * value_y12)) + _this12->_20)) ) / ( (Float)(w12) ));
HXDLIN( 945)		Float y13 = (( (Float)((((_this12->_01 * value_x12) + (_this12->_11 * value_y12)) + _this12->_21)) ) / ( (Float)(w12) ));
HXDLIN( 945)		p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x13,y13);
HXLINE( 946)		 ::kha::math::FastMatrix3 _this13 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 946)		float value_x13 = ( (float)(((x + width) - (strength / ( (Float)(2) )))) );
HXDLIN( 946)		float value_y13 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 946)		float w13 = (((_this13->_02 * value_x13) + (_this13->_12 * value_y13)) + _this13->_22);
HXDLIN( 946)		Float x14 = (( (Float)((((_this13->_00 * value_x13) + (_this13->_10 * value_y13)) + _this13->_20)) ) / ( (Float)(w13) ));
HXDLIN( 946)		Float y14 = (( (Float)((((_this13->_01 * value_x13) + (_this13->_11 * value_y13)) + _this13->_21)) ) / ( (Float)(w13) ));
HXDLIN( 946)		p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x14,y14);
HXLINE( 947)		 ::kha::math::FastMatrix3 _this14 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 947)		float value_x14 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 947)		float value_y14 = ( (float)((y + (strength / ( (Float)(2) )))) );
HXDLIN( 947)		float w14 = (((_this14->_02 * value_x14) + (_this14->_12 * value_y14)) + _this14->_22);
HXDLIN( 947)		Float x15 = (( (Float)((((_this14->_00 * value_x14) + (_this14->_10 * value_y14)) + _this14->_20)) ) / ( (Float)(w14) ));
HXDLIN( 947)		Float y15 = (( (Float)((((_this14->_01 * value_x14) + (_this14->_11 * value_y14)) + _this14->_21)) ) / ( (Float)(w14) ));
HXDLIN( 947)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x15,y15);
HXLINE( 948)		 ::kha::math::FastMatrix3 _this15 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 948)		float value_x15 = ( (float)(((x + width) + (strength / ( (Float)(2) )))) );
HXDLIN( 948)		float value_y15 = ( (float)(((y + height) - (strength / ( (Float)(2) )))) );
HXDLIN( 948)		float w15 = (((_this15->_02 * value_x15) + (_this15->_12 * value_y15)) + _this15->_22);
HXDLIN( 948)		Float x16 = (( (Float)((((_this15->_00 * value_x15) + (_this15->_10 * value_y15)) + _this15->_20)) ) / ( (Float)(w15) ));
HXDLIN( 948)		Float y16 = (( (Float)((((_this15->_01 * value_x15) + (_this15->_11 * value_y15)) + _this15->_21)) ) / ( (Float)(w15) ));
HXDLIN( 948)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x16,y16);
HXLINE( 949)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp9 = this->coloredPainter;
HXDLIN( 949)		Float _hx_tmp10 = this->get_opacity();
HXDLIN( 949)		int _hx_tmp11 = this->get_color();
HXDLIN( 949)		_hx_tmp9->fillRect(( (float)(_hx_tmp10) ),_hx_tmp11,( (Float)(p1->x) ),( (Float)(p1->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p3->x) ),( (Float)(p3->y) ),( (Float)(p4->x) ),( (Float)(p4->y) ));
            	}


void Graphics2_obj::fillRect(Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_952_fillRect)
HXLINE( 953)		this->imagePainter->end();
HXLINE( 954)		this->textPainter->end();
HXLINE( 956)		 ::kha::math::FastMatrix3 _this = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 956)		float value_x = ( (float)(x) );
HXDLIN( 956)		float value_y = ( (float)((y + height)) );
HXDLIN( 956)		float w = (((_this->_02 * value_x) + (_this->_12 * value_y)) + _this->_22);
HXDLIN( 956)		Float x1 = (( (Float)((((_this->_00 * value_x) + (_this->_10 * value_y)) + _this->_20)) ) / ( (Float)(w) ));
HXDLIN( 956)		Float y1 = (( (Float)((((_this->_01 * value_x) + (_this->_11 * value_y)) + _this->_21)) ) / ( (Float)(w) ));
HXDLIN( 956)		float p1_x = ( (float)(x1) );
HXDLIN( 956)		float p1_y = ( (float)(y1) );
HXLINE( 957)		 ::kha::math::FastMatrix3 _this1 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 957)		float value_x1 = ( (float)(x) );
HXDLIN( 957)		float value_y1 = ( (float)(y) );
HXDLIN( 957)		float w1 = (((_this1->_02 * value_x1) + (_this1->_12 * value_y1)) + _this1->_22);
HXDLIN( 957)		Float x2 = (( (Float)((((_this1->_00 * value_x1) + (_this1->_10 * value_y1)) + _this1->_20)) ) / ( (Float)(w1) ));
HXDLIN( 957)		Float y2 = (( (Float)((((_this1->_01 * value_x1) + (_this1->_11 * value_y1)) + _this1->_21)) ) / ( (Float)(w1) ));
HXDLIN( 957)		float p2_x = ( (float)(x2) );
HXDLIN( 957)		float p2_y = ( (float)(y2) );
HXLINE( 958)		 ::kha::math::FastMatrix3 _this2 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 958)		float value_x2 = ( (float)((x + width)) );
HXDLIN( 958)		float value_y2 = ( (float)(y) );
HXDLIN( 958)		float w2 = (((_this2->_02 * value_x2) + (_this2->_12 * value_y2)) + _this2->_22);
HXDLIN( 958)		Float x3 = (( (Float)((((_this2->_00 * value_x2) + (_this2->_10 * value_y2)) + _this2->_20)) ) / ( (Float)(w2) ));
HXDLIN( 958)		Float y3 = (( (Float)((((_this2->_01 * value_x2) + (_this2->_11 * value_y2)) + _this2->_21)) ) / ( (Float)(w2) ));
HXDLIN( 958)		float p3_x = ( (float)(x3) );
HXDLIN( 958)		float p3_y = ( (float)(y3) );
HXLINE( 959)		 ::kha::math::FastMatrix3 _this3 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN( 959)		float value_x3 = ( (float)((x + width)) );
HXDLIN( 959)		float value_y3 = ( (float)((y + height)) );
HXDLIN( 959)		float w3 = (((_this3->_02 * value_x3) + (_this3->_12 * value_y3)) + _this3->_22);
HXDLIN( 959)		Float x4 = (( (Float)((((_this3->_00 * value_x3) + (_this3->_10 * value_y3)) + _this3->_20)) ) / ( (Float)(w3) ));
HXDLIN( 959)		Float y4 = (( (Float)((((_this3->_01 * value_x3) + (_this3->_11 * value_y3)) + _this3->_21)) ) / ( (Float)(w3) ));
HXDLIN( 959)		float p4_x = ( (float)(x4) );
HXDLIN( 959)		float p4_y = ( (float)(y4) );
HXLINE( 960)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN( 960)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 960)		_hx_tmp->fillRect(( (float)(_hx_tmp1) ),this->get_color(),( (Float)(p1_x) ),( (Float)(p1_y) ),( (Float)(p2_x) ),( (Float)(p2_y) ),( (Float)(p3_x) ),( (Float)(p3_y) ),( (Float)(p4_x) ),( (Float)(p4_y) ));
            	}


void Graphics2_obj::drawString(::String text,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_963_drawString)
HXLINE( 964)		this->imagePainter->end();
HXLINE( 965)		{
HXLINE( 965)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 965)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 965)				_this->drawTriBuffer(false);
            			}
HXDLIN( 965)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 965)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 967)		 ::kha::graphics4::TextShaderPainter _hx_tmp = this->textPainter;
HXDLIN( 967)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 967)		int _hx_tmp2 = this->get_color();
HXDLIN( 967)		_hx_tmp->drawString(text,( (float)(_hx_tmp1) ),_hx_tmp2,x,y,this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >());
            	}


void Graphics2_obj::drawCharacters(::Array< int > text,int start,int length,Float x,Float y){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_970_drawCharacters)
HXLINE( 971)		this->imagePainter->end();
HXLINE( 972)		{
HXLINE( 972)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN( 972)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE( 972)				_this->drawTriBuffer(false);
            			}
HXDLIN( 972)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE( 972)				_this->drawBuffer(false);
            			}
            		}
HXLINE( 974)		 ::kha::graphics4::TextShaderPainter _hx_tmp = this->textPainter;
HXDLIN( 974)		Float _hx_tmp1 = this->get_opacity();
HXDLIN( 974)		int _hx_tmp2 = this->get_color();
HXDLIN( 974)		_hx_tmp->drawCharacters(text,start,length,( (float)(_hx_tmp1) ),_hx_tmp2,x,y,this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >());
            	}


 ::kha::Kravur Graphics2_obj::get_font(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_978_get_font)
HXDLIN( 978)		return this->myFont;
            	}


 ::kha::Kravur Graphics2_obj::set_font( ::kha::Kravur font){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_981_set_font)
HXLINE( 982)		this->textPainter->setFont(font);
HXLINE( 983)		return (this->myFont = font);
            	}


int Graphics2_obj::set_fontSize(int value){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_987_set_fontSize)
HXDLIN( 987)		return this->super::set_fontSize((this->textPainter->fontSize = value));
            	}


void Graphics2_obj::drawLine(Float x1,Float y1,Float x2,Float y2,hx::Null< Float >  __o_strength){
            		Float strength = __o_strength.Default(((Float)1.0));
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_990_drawLine)
HXLINE( 991)		this->imagePainter->end();
HXLINE( 992)		this->textPainter->end();
HXLINE( 994)		 ::kha::math::FastVector2 vec;
HXLINE( 995)		if ((y2 == y1)) {
HXLINE( 995)			vec =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,0,-1);
            		}
            		else {
HXLINE( 996)			vec =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,1,(-((x2 - x1)) / (y2 - y1)));
            		}
HXLINE( 997)		vec->set_length(( (float)(strength) ));
HXLINE( 998)		 ::kha::math::FastVector2 p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,(x1 + (((Float)0.5) * ( (Float)(vec->x) ))),(y1 + (((Float)0.5) * ( (Float)(vec->y) ))));
HXLINE( 999)		 ::kha::math::FastVector2 p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,(x2 + (((Float)0.5) * ( (Float)(vec->x) ))),(y2 + (((Float)0.5) * ( (Float)(vec->y) ))));
HXLINE(1000)		 ::kha::math::FastVector2 p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,(p1->x - vec->x),(p1->y - vec->y));
HXLINE(1001)		 ::kha::math::FastVector2 p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,(p2->x - vec->x),(p2->y - vec->y));
HXLINE(1003)		 ::kha::math::FastMatrix3 _this = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1003)		float w = (((_this->_02 * p1->x) + (_this->_12 * p1->y)) + _this->_22);
HXDLIN(1003)		Float x = (( (Float)((((_this->_00 * p1->x) + (_this->_10 * p1->y)) + _this->_20)) ) / ( (Float)(w) ));
HXDLIN(1003)		Float y = (( (Float)((((_this->_01 * p1->x) + (_this->_11 * p1->y)) + _this->_21)) ) / ( (Float)(w) ));
HXDLIN(1003)		p1 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x,y);
HXLINE(1004)		 ::kha::math::FastMatrix3 _this1 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1004)		float w1 = (((_this1->_02 * p2->x) + (_this1->_12 * p2->y)) + _this1->_22);
HXDLIN(1004)		Float x3 = (( (Float)((((_this1->_00 * p2->x) + (_this1->_10 * p2->y)) + _this1->_20)) ) / ( (Float)(w1) ));
HXDLIN(1004)		Float y3 = (( (Float)((((_this1->_01 * p2->x) + (_this1->_11 * p2->y)) + _this1->_21)) ) / ( (Float)(w1) ));
HXDLIN(1004)		p2 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x3,y3);
HXLINE(1005)		 ::kha::math::FastMatrix3 _this2 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1005)		float w2 = (((_this2->_02 * p3->x) + (_this2->_12 * p3->y)) + _this2->_22);
HXDLIN(1005)		Float x4 = (( (Float)((((_this2->_00 * p3->x) + (_this2->_10 * p3->y)) + _this2->_20)) ) / ( (Float)(w2) ));
HXDLIN(1005)		Float y4 = (( (Float)((((_this2->_01 * p3->x) + (_this2->_11 * p3->y)) + _this2->_21)) ) / ( (Float)(w2) ));
HXDLIN(1005)		p3 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x4,y4);
HXLINE(1006)		 ::kha::math::FastMatrix3 _this3 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1006)		float w3 = (((_this3->_02 * p4->x) + (_this3->_12 * p4->y)) + _this3->_22);
HXDLIN(1006)		Float x5 = (( (Float)((((_this3->_00 * p4->x) + (_this3->_10 * p4->y)) + _this3->_20)) ) / ( (Float)(w3) ));
HXDLIN(1006)		Float y5 = (( (Float)((((_this3->_01 * p4->x) + (_this3->_11 * p4->y)) + _this3->_21)) ) / ( (Float)(w3) ));
HXDLIN(1006)		p4 =  ::kha::math::FastVector2_obj::__alloc( HX_CTX ,x5,y5);
HXLINE(1008)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN(1008)		Float _hx_tmp1 = this->get_opacity();
HXDLIN(1008)		int _hx_tmp2 = this->get_color();
HXDLIN(1008)		_hx_tmp->fillTriangle(( (float)(_hx_tmp1) ),_hx_tmp2,( (Float)(p1->x) ),( (Float)(p1->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p3->x) ),( (Float)(p3->y) ));
HXLINE(1009)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp3 = this->coloredPainter;
HXDLIN(1009)		Float _hx_tmp4 = this->get_opacity();
HXDLIN(1009)		int _hx_tmp5 = this->get_color();
HXDLIN(1009)		_hx_tmp3->fillTriangle(( (float)(_hx_tmp4) ),_hx_tmp5,( (Float)(p3->x) ),( (Float)(p3->y) ),( (Float)(p2->x) ),( (Float)(p2->y) ),( (Float)(p4->x) ),( (Float)(p4->y) ));
            	}


void Graphics2_obj::fillTriangle(Float x1,Float y1,Float x2,Float y2,Float x3,Float y3){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1012_fillTriangle)
HXLINE(1013)		this->imagePainter->end();
HXLINE(1014)		this->textPainter->end();
HXLINE(1016)		 ::kha::math::FastMatrix3 _this = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1016)		float value_x = ( (float)(x1) );
HXDLIN(1016)		float value_y = ( (float)(y1) );
HXDLIN(1016)		float w = (((_this->_02 * value_x) + (_this->_12 * value_y)) + _this->_22);
HXDLIN(1016)		Float x = (( (Float)((((_this->_00 * value_x) + (_this->_10 * value_y)) + _this->_20)) ) / ( (Float)(w) ));
HXDLIN(1016)		Float y = (( (Float)((((_this->_01 * value_x) + (_this->_11 * value_y)) + _this->_21)) ) / ( (Float)(w) ));
HXDLIN(1016)		float p1_x = ( (float)(x) );
HXDLIN(1016)		float p1_y = ( (float)(y) );
HXLINE(1017)		 ::kha::math::FastMatrix3 _this1 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1017)		float value_x1 = ( (float)(x2) );
HXDLIN(1017)		float value_y1 = ( (float)(y2) );
HXDLIN(1017)		float w1 = (((_this1->_02 * value_x1) + (_this1->_12 * value_y1)) + _this1->_22);
HXDLIN(1017)		Float x4 = (( (Float)((((_this1->_00 * value_x1) + (_this1->_10 * value_y1)) + _this1->_20)) ) / ( (Float)(w1) ));
HXDLIN(1017)		Float y4 = (( (Float)((((_this1->_01 * value_x1) + (_this1->_11 * value_y1)) + _this1->_21)) ) / ( (Float)(w1) ));
HXDLIN(1017)		float p2_x = ( (float)(x4) );
HXDLIN(1017)		float p2_y = ( (float)(y4) );
HXLINE(1018)		 ::kha::math::FastMatrix3 _this2 = this->transformations->__get((this->transformations->length - 1)).StaticCast<  ::kha::math::FastMatrix3 >();
HXDLIN(1018)		float value_x2 = ( (float)(x3) );
HXDLIN(1018)		float value_y2 = ( (float)(y3) );
HXDLIN(1018)		float w2 = (((_this2->_02 * value_x2) + (_this2->_12 * value_y2)) + _this2->_22);
HXDLIN(1018)		Float x5 = (( (Float)((((_this2->_00 * value_x2) + (_this2->_10 * value_y2)) + _this2->_20)) ) / ( (Float)(w2) ));
HXDLIN(1018)		Float y5 = (( (Float)((((_this2->_01 * value_x2) + (_this2->_11 * value_y2)) + _this2->_21)) ) / ( (Float)(w2) ));
HXDLIN(1018)		float p3_x = ( (float)(x5) );
HXDLIN(1018)		float p3_y = ( (float)(y5) );
HXLINE(1019)		 ::kha::graphics4::ColoredShaderPainter _hx_tmp = this->coloredPainter;
HXDLIN(1019)		Float _hx_tmp1 = this->get_opacity();
HXDLIN(1019)		_hx_tmp->fillTriangle(( (float)(_hx_tmp1) ),this->get_color(),( (Float)(p1_x) ),( (Float)(p1_y) ),( (Float)(p2_x) ),( (Float)(p2_y) ),( (Float)(p3_x) ),( (Float)(p3_y) ));
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::get_imageScaleQuality(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1025_get_imageScaleQuality)
HXDLIN(1025)		return this->myImageScaleQuality;
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::set_imageScaleQuality( ::kha::graphics2::ImageScaleQuality value){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1028_set_imageScaleQuality)
HXLINE(1029)		this->imagePainter->setBilinearFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1030)		this->textPainter->setBilinearFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1031)		return (this->myImageScaleQuality = value);
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::get_mipmapScaleQuality(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1037_get_mipmapScaleQuality)
HXDLIN(1037)		return this->myMipmapScaleQuality;
            	}


 ::kha::graphics2::ImageScaleQuality Graphics2_obj::set_mipmapScaleQuality( ::kha::graphics2::ImageScaleQuality value){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1040_set_mipmapScaleQuality)
HXLINE(1041)		this->imagePainter->setBilinearMipmapFilter(hx::IsEq( value,::kha::graphics2::ImageScaleQuality_obj::High_dyn() ));
HXLINE(1043)		return (this->myMipmapScaleQuality = value);
            	}


void Graphics2_obj::setPipeline( ::kha::graphics4::PipelineState pipeline){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1046_setPipeline)
HXLINE(1047)		this->flush();
HXLINE(1048)		this->imagePainter->set_pipeline(pipeline);
HXLINE(1049)		this->coloredPainter->set_pipeline(pipeline);
HXLINE(1050)		this->textPainter->set_pipeline(pipeline);
HXLINE(1051)		if (hx::IsNotNull( pipeline )) {
HXLINE(1051)			::kha::graphics4::Graphics_obj::setPipeline(this->g,pipeline);
            		}
            	}


void Graphics2_obj::scissor(int x,int y,int width,int height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1054_scissor)
HXLINE(1055)		this->flush();
HXLINE(1056)		::kha::graphics4::Graphics_obj::scissor(this->g,x,y,width,height);
            	}


void Graphics2_obj::disableScissor(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1059_disableScissor)
HXLINE(1060)		this->flush();
HXLINE(1061)		::kha::graphics4::Graphics_obj::disableScissor(this->g);
            	}


void Graphics2_obj::begin(hx::Null< bool >  __o_clear, ::Dynamic clearColor){
            		bool clear = __o_clear.Default(true);
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1064_begin)
HXLINE(1065)		::kha::graphics4::Graphics_obj::begin(this->g,null());
HXLINE(1066)		if (clear) {
HXLINE(1066)			this->clear(clearColor);
            		}
HXLINE(1067)		this->setProjection();
            	}


void Graphics2_obj::clear( ::Dynamic color){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1070_clear)
HXLINE(1071)		this->flush();
HXLINE(1072)		 ::Dynamic _hx_tmp;
HXDLIN(1072)		if (hx::IsNull( color )) {
HXLINE(1072)			_hx_tmp = -16777216;
            		}
            		else {
HXLINE(1072)			_hx_tmp = color;
            		}
HXDLIN(1072)		::kha::graphics4::Graphics_obj::clear(this->g,_hx_tmp,null(),null());
            	}


void Graphics2_obj::flush(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1075_flush)
HXLINE(1076)		this->imagePainter->end();
HXLINE(1077)		this->textPainter->end();
HXLINE(1078)		{
HXLINE(1078)			 ::kha::graphics4::ColoredShaderPainter _this = this->coloredPainter;
HXDLIN(1078)			if ((::kha::graphics4::ColoredShaderPainter_obj::triangleBufferIndex > 0)) {
HXLINE(1078)				_this->drawTriBuffer(false);
            			}
HXDLIN(1078)			if ((::kha::graphics4::ColoredShaderPainter_obj::bufferIndex > 0)) {
HXLINE(1078)				_this->drawBuffer(false);
            			}
            		}
            	}


void Graphics2_obj::end(){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1081_end)
HXLINE(1082)		this->flush();
HXLINE(1083)		::kha::graphics4::Graphics_obj::end(this->g);
            	}


void Graphics2_obj::drawVideoInternal( ::kha::Video video,Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1086_drawVideoInternal)
            	}


HX_DEFINE_DYNAMIC_FUNC5(Graphics2_obj,drawVideoInternal,(void))

void Graphics2_obj::drawVideo( ::kha::Video video,Float x,Float y,Float width,Float height){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_1090_drawVideo)
HXLINE(1091)		this->setPipeline(::kha::graphics4::Graphics2_obj::videoPipeline);
HXLINE(1092)		this->drawVideoInternal(video,x,y,width,height);
HXLINE(1093)		this->setPipeline(null());
            	}


 ::kha::graphics4::PipelineState Graphics2_obj::videoPipeline;

int Graphics2_obj::upperPowerOfTwo(int v){
            	HX_STACKFRAME(&_hx_pos_97689b4ae489993c_829_upperPowerOfTwo)
HXLINE( 830)		v = (v - 1);
HXLINE( 831)		v = (v | hx::UShr(v,1));
HXLINE( 832)		v = (v | hx::UShr(v,2));
HXLINE( 833)		v = (v | hx::UShr(v,4));
HXLINE( 834)		v = (v | hx::UShr(v,8));
HXLINE( 835)		v = (v | hx::UShr(v,16));
HXLINE( 836)		v = (v + 1);
HXLINE( 837)		return v;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,upperPowerOfTwo,return )

 ::kha::graphics4::VertexStructure Graphics2_obj::createImageVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1096_createImageVertexStructure)
HXLINE(1097)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE(1098)		structure->add(HX_("vertexPosition",2d,3c,14,50),2);
HXLINE(1099)		structure->add(HX_("texPosition",b0,79,ff,c7),1);
HXLINE(1100)		structure->add(HX_("vertexColor",5f,3b,98,5e),3);
HXLINE(1101)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,createImageVertexStructure,return )

 ::kha::graphics4::PipelineState Graphics2_obj::createImagePipeline( ::kha::graphics4::VertexStructure structure){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1104_createImagePipeline)
HXLINE(1105)		 ::kha::graphics4::PipelineState shaderPipeline =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(1106)		shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_image_frag;
HXLINE(1107)		shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_image_vert;
HXLINE(1108)		shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE(1109)		shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::BlendOne_dyn();
HXLINE(1110)		shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1111)		shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::BlendOne_dyn();
HXLINE(1112)		shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1113)		return shaderPipeline;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,createImagePipeline,return )

 ::kha::graphics4::VertexStructure Graphics2_obj::createColoredVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1116_createColoredVertexStructure)
HXLINE(1117)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE(1118)		structure->add(HX_("vertexPosition",2d,3c,14,50),2);
HXLINE(1119)		structure->add(HX_("vertexColor",5f,3b,98,5e),3);
HXLINE(1120)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,createColoredVertexStructure,return )

 ::kha::graphics4::PipelineState Graphics2_obj::createColoredPipeline( ::kha::graphics4::VertexStructure structure){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1123_createColoredPipeline)
HXLINE(1124)		 ::kha::graphics4::PipelineState shaderPipeline =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(1125)		shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_colored_frag;
HXLINE(1126)		shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_colored_vert;
HXLINE(1127)		shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE(1128)		shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1129)		shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1130)		shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1131)		shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1132)		return shaderPipeline;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,createColoredPipeline,return )

 ::kha::graphics4::VertexStructure Graphics2_obj::createTextVertexStructure(){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1135_createTextVertexStructure)
HXLINE(1136)		 ::kha::graphics4::VertexStructure structure =  ::kha::graphics4::VertexStructure_obj::__alloc( HX_CTX );
HXLINE(1137)		structure->add(HX_("vertexPosition",2d,3c,14,50),2);
HXLINE(1138)		structure->add(HX_("texPosition",b0,79,ff,c7),1);
HXLINE(1139)		structure->add(HX_("vertexColor",5f,3b,98,5e),3);
HXLINE(1140)		return structure;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Graphics2_obj,createTextVertexStructure,return )

 ::kha::graphics4::PipelineState Graphics2_obj::createTextPipeline( ::kha::graphics4::VertexStructure structure){
            	HX_GC_STACKFRAME(&_hx_pos_97689b4ae489993c_1143_createTextPipeline)
HXLINE(1144)		 ::kha::graphics4::PipelineState shaderPipeline =  ::kha::graphics4::PipelineState_obj::__alloc( HX_CTX );
HXLINE(1145)		shaderPipeline->fragmentShader = ::kha::Shaders_obj::painter_text_frag;
HXLINE(1146)		shaderPipeline->vertexShader = ::kha::Shaders_obj::painter_text_vert;
HXLINE(1147)		shaderPipeline->inputLayout = ::Array_obj< ::Dynamic>::__new(1)->init(0,structure);
HXLINE(1148)		shaderPipeline->blendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1149)		shaderPipeline->blendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1150)		shaderPipeline->alphaBlendSource = ::kha::graphics4::BlendingFactor_obj::SourceAlpha_dyn();
HXLINE(1151)		shaderPipeline->alphaBlendDestination = ::kha::graphics4::BlendingFactor_obj::InverseSourceAlpha_dyn();
HXLINE(1152)		return shaderPipeline;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Graphics2_obj,createTextPipeline,return )


hx::ObjectPtr< Graphics2_obj > Graphics2_obj::__new(::Dynamic canvas) {
	hx::ObjectPtr< Graphics2_obj > __this = new Graphics2_obj();
	__this->__construct(canvas);
	return __this;
}

hx::ObjectPtr< Graphics2_obj > Graphics2_obj::__alloc(hx::Ctx *_hx_ctx,::Dynamic canvas) {
	Graphics2_obj *__this = (Graphics2_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Graphics2_obj), true, "kha.graphics4.Graphics2"));
	*(void **)__this = Graphics2_obj::_hx_vtable;
	__this->__construct(canvas);
	return __this;
}

Graphics2_obj::Graphics2_obj()
{
}

void Graphics2_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Graphics2);
	HX_MARK_MEMBER_NAME(myColor,"myColor");
	HX_MARK_MEMBER_NAME(myFont,"myFont");
	HX_MARK_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_MARK_MEMBER_NAME(imagePainter,"imagePainter");
	HX_MARK_MEMBER_NAME(coloredPainter,"coloredPainter");
	HX_MARK_MEMBER_NAME(textPainter,"textPainter");
	HX_MARK_MEMBER_NAME(canvas,"canvas");
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(myImageScaleQuality,"myImageScaleQuality");
	HX_MARK_MEMBER_NAME(myMipmapScaleQuality,"myMipmapScaleQuality");
	 ::kha::graphics2::Graphics_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Graphics2_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(myColor,"myColor");
	HX_VISIT_MEMBER_NAME(myFont,"myFont");
	HX_VISIT_MEMBER_NAME(projectionMatrix,"projectionMatrix");
	HX_VISIT_MEMBER_NAME(imagePainter,"imagePainter");
	HX_VISIT_MEMBER_NAME(coloredPainter,"coloredPainter");
	HX_VISIT_MEMBER_NAME(textPainter,"textPainter");
	HX_VISIT_MEMBER_NAME(canvas,"canvas");
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(myImageScaleQuality,"myImageScaleQuality");
	HX_VISIT_MEMBER_NAME(myMipmapScaleQuality,"myMipmapScaleQuality");
	 ::kha::graphics2::Graphics_obj::__Visit(HX_VISIT_ARG);
}

hx::Val Graphics2_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return hx::Val( g ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"end") ) { return hx::Val( end_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"begin") ) { return hx::Val( begin_dyn() ); }
		if (HX_FIELD_EQ(inName,"clear") ) { return hx::Val( clear_dyn() ); }
		if (HX_FIELD_EQ(inName,"flush") ) { return hx::Val( flush_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"myFont") ) { return hx::Val( myFont ); }
		if (HX_FIELD_EQ(inName,"canvas") ) { return hx::Val( canvas ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myColor") ) { return hx::Val( myColor ); }
		if (HX_FIELD_EQ(inName,"scissor") ) { return hx::Val( scissor_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"drawRect") ) { return hx::Val( drawRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillRect") ) { return hx::Val( fillRect_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_font") ) { return hx::Val( get_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_font") ) { return hx::Val( set_font_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawLine") ) { return hx::Val( drawLine_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"drawImage") ) { return hx::Val( drawImage_dyn() ); }
		if (HX_FIELD_EQ(inName,"get_color") ) { return hx::Val( get_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_color") ) { return hx::Val( set_color_dyn() ); }
		if (HX_FIELD_EQ(inName,"drawVideo") ) { return hx::Val( drawVideo_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"drawString") ) { return hx::Val( drawString_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textPainter") ) { return hx::Val( textPainter ); }
		if (HX_FIELD_EQ(inName,"setPipeline") ) { return hx::Val( setPipeline_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imagePainter") ) { return hx::Val( imagePainter ); }
		if (HX_FIELD_EQ(inName,"set_fontSize") ) { return hx::Val( set_fontSize_dyn() ); }
		if (HX_FIELD_EQ(inName,"fillTriangle") ) { return hx::Val( fillTriangle_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"setProjection") ) { return hx::Val( setProjection_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"coloredPainter") ) { return hx::Val( coloredPainter ); }
		if (HX_FIELD_EQ(inName,"drawCharacters") ) { return hx::Val( drawCharacters_dyn() ); }
		if (HX_FIELD_EQ(inName,"disableScissor") ) { return hx::Val( disableScissor_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { return hx::Val( projectionMatrix ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"drawVideoInternal") ) { return hx::Val( drawVideoInternal_dyn() ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"drawScaledSubImage") ) { return hx::Val( drawScaledSubImage_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"myImageScaleQuality") ) { return hx::Val( myImageScaleQuality ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"myMipmapScaleQuality") ) { return hx::Val( myMipmapScaleQuality ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"get_imageScaleQuality") ) { return hx::Val( get_imageScaleQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_imageScaleQuality") ) { return hx::Val( set_imageScaleQuality_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"get_mipmapScaleQuality") ) { return hx::Val( get_mipmapScaleQuality_dyn() ); }
		if (HX_FIELD_EQ(inName,"set_mipmapScaleQuality") ) { return hx::Val( set_mipmapScaleQuality_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Graphics2_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"videoPipeline") ) { outValue = ( videoPipeline ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"upperPowerOfTwo") ) { outValue = upperPowerOfTwo_dyn(); return true; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"createTextPipeline") ) { outValue = createTextPipeline_dyn(); return true; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"createImagePipeline") ) { outValue = createImagePipeline_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"createColoredPipeline") ) { outValue = createColoredPipeline_dyn(); return true; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"createTextVertexStructure") ) { outValue = createTextVertexStructure_dyn(); return true; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"createImageVertexStructure") ) { outValue = createImageVertexStructure_dyn(); return true; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"createColoredVertexStructure") ) { outValue = createColoredVertexStructure_dyn(); return true; }
	}
	return false;
}

hx::Val Graphics2_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"myFont") ) { myFont=inValue.Cast<  ::kha::Kravur >(); return inValue; }
		if (HX_FIELD_EQ(inName,"canvas") ) { canvas=inValue.Cast< ::Dynamic >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"myColor") ) { myColor=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"textPainter") ) { textPainter=inValue.Cast<  ::kha::graphics4::TextShaderPainter >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"imagePainter") ) { imagePainter=inValue.Cast<  ::kha::graphics4::ImageShaderPainter >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"coloredPainter") ) { coloredPainter=inValue.Cast<  ::kha::graphics4::ColoredShaderPainter >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"projectionMatrix") ) { projectionMatrix=inValue.Cast<  ::kha::math::FastMatrix4 >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"myImageScaleQuality") ) { myImageScaleQuality=inValue.Cast<  ::kha::graphics2::ImageScaleQuality >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"myMipmapScaleQuality") ) { myMipmapScaleQuality=inValue.Cast<  ::kha::graphics2::ImageScaleQuality >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Graphics2_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 13:
		if (HX_FIELD_EQ(inName,"videoPipeline") ) { videoPipeline=ioValue.Cast<  ::kha::graphics4::PipelineState >(); return true; }
	}
	return false;
}

void Graphics2_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("myColor",57,1a,5c,f3));
	outFields->push(HX_("myFont",5b,0f,fc,6e));
	outFields->push(HX_("projectionMatrix",30,88,bb,d0));
	outFields->push(HX_("imagePainter",70,2d,eb,a7));
	outFields->push(HX_("coloredPainter",29,a7,40,dc));
	outFields->push(HX_("textPainter",5e,ae,a2,93));
	outFields->push(HX_("canvas",d8,54,42,b8));
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("myImageScaleQuality",44,72,83,ee));
	outFields->push(HX_("myMipmapScaleQuality",89,17,d9,b9));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Graphics2_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(Graphics2_obj,myColor),HX_("myColor",57,1a,5c,f3)},
	{hx::fsObject /*  ::kha::Kravur */ ,(int)offsetof(Graphics2_obj,myFont),HX_("myFont",5b,0f,fc,6e)},
	{hx::fsObject /*  ::kha::math::FastMatrix4 */ ,(int)offsetof(Graphics2_obj,projectionMatrix),HX_("projectionMatrix",30,88,bb,d0)},
	{hx::fsObject /*  ::kha::graphics4::ImageShaderPainter */ ,(int)offsetof(Graphics2_obj,imagePainter),HX_("imagePainter",70,2d,eb,a7)},
	{hx::fsObject /*  ::kha::graphics4::ColoredShaderPainter */ ,(int)offsetof(Graphics2_obj,coloredPainter),HX_("coloredPainter",29,a7,40,dc)},
	{hx::fsObject /*  ::kha::graphics4::TextShaderPainter */ ,(int)offsetof(Graphics2_obj,textPainter),HX_("textPainter",5e,ae,a2,93)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(Graphics2_obj,canvas),HX_("canvas",d8,54,42,b8)},
	{hx::fsObject /* ::Dynamic */ ,(int)offsetof(Graphics2_obj,g),HX_("g",67,00,00,00)},
	{hx::fsObject /*  ::kha::graphics2::ImageScaleQuality */ ,(int)offsetof(Graphics2_obj,myImageScaleQuality),HX_("myImageScaleQuality",44,72,83,ee)},
	{hx::fsObject /*  ::kha::graphics2::ImageScaleQuality */ ,(int)offsetof(Graphics2_obj,myMipmapScaleQuality),HX_("myMipmapScaleQuality",89,17,d9,b9)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo Graphics2_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::kha::graphics4::PipelineState */ ,(void *) &Graphics2_obj::videoPipeline,HX_("videoPipeline",bd,fe,62,ee)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String Graphics2_obj_sMemberFields[] = {
	HX_("myColor",57,1a,5c,f3),
	HX_("myFont",5b,0f,fc,6e),
	HX_("projectionMatrix",30,88,bb,d0),
	HX_("imagePainter",70,2d,eb,a7),
	HX_("coloredPainter",29,a7,40,dc),
	HX_("textPainter",5e,ae,a2,93),
	HX_("canvas",d8,54,42,b8),
	HX_("g",67,00,00,00),
	HX_("setProjection",d1,c6,03,66),
	HX_("drawImage",b7,54,74,85),
	HX_("drawScaledSubImage",99,85,bc,e8),
	HX_("get_color",ba,cd,05,8e),
	HX_("set_color",c6,b9,56,71),
	HX_("drawRect",48,f7,10,60),
	HX_("fillRect",47,45,b9,6c),
	HX_("drawString",f5,a3,f3,52),
	HX_("drawCharacters",ce,35,d8,38),
	HX_("get_font",58,19,7b,c3),
	HX_("set_font",cc,72,d8,71),
	HX_("set_fontSize",ad,95,e4,98),
	HX_("drawLine",18,c2,1c,5c),
	HX_("fillTriangle",6b,04,3a,92),
	HX_("myImageScaleQuality",44,72,83,ee),
	HX_("get_imageScaleQuality",27,2e,de,f3),
	HX_("set_imageScaleQuality",33,fc,e6,47),
	HX_("myMipmapScaleQuality",89,17,d9,b9),
	HX_("get_mipmapScaleQuality",46,c2,e2,63),
	HX_("set_mipmapScaleQuality",ba,3e,8e,97),
	HX_("setPipeline",e4,84,e4,7b),
	HX_("scissor",1c,28,e7,04),
	HX_("disableScissor",14,73,66,02),
	HX_("begin",29,ea,55,b0),
	HX_("clear",8d,71,5b,48),
	HX_("flush",c4,62,9b,02),
	HX_("end",db,03,4d,00),
	HX_("drawVideoInternal",34,9c,df,df),
	HX_("drawVideo",d7,49,07,ff),
	::String(null()) };

static void Graphics2_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Graphics2_obj::videoPipeline,"videoPipeline");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Graphics2_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Graphics2_obj::videoPipeline,"videoPipeline");
};

#endif

hx::Class Graphics2_obj::__mClass;

static ::String Graphics2_obj_sStaticFields[] = {
	HX_("videoPipeline",bd,fe,62,ee),
	HX_("upperPowerOfTwo",72,2a,fd,fb),
	HX_("createImageVertexStructure",30,ec,84,dd),
	HX_("createImagePipeline",01,25,7d,0b),
	HX_("createColoredVertexStructure",e9,c5,e5,bc),
	HX_("createColoredPipeline",28,ce,c2,d2),
	HX_("createTextVertexStructure",66,30,f9,b4),
	HX_("createTextPipeline",0b,76,1d,7a),
	::String(null())
};

void Graphics2_obj::__register()
{
	Graphics2_obj _hx_dummy;
	Graphics2_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.Graphics2",f8,6b,fa,cf);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Graphics2_obj::__GetStatic;
	__mClass->mSetStaticField = &Graphics2_obj::__SetStatic;
	__mClass->mMarkFunc = Graphics2_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Graphics2_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Graphics2_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Graphics2_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Graphics2_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Graphics2_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Graphics2_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
