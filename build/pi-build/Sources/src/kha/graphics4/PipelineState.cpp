// Generated by Haxe 4.0.0-preview.5+1aaf080
#include <hxcpp.h>

#ifndef INCLUDED_Type
#include <hxinc/Type.h>
#endif
#ifndef INCLUDED_kha_graphics4_BlendingFactor
#include <hxinc/kha/graphics4/BlendingFactor.h>
#endif
#ifndef INCLUDED_kha_graphics4_CompareMode
#include <hxinc/kha/graphics4/CompareMode.h>
#endif
#ifndef INCLUDED_kha_graphics4_ConstantLocation
#include <hxinc/kha/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_graphics4_CullMode
#include <hxinc/kha/graphics4/CullMode.h>
#endif
#ifndef INCLUDED_kha_graphics4_FragmentShader
#include <hxinc/kha/graphics4/FragmentShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_GeometryShader
#include <hxinc/kha/graphics4/GeometryShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineState
#include <hxinc/kha/graphics4/PipelineState.h>
#endif
#ifndef INCLUDED_kha_graphics4_PipelineStateBase
#include <hxinc/kha/graphics4/PipelineStateBase.h>
#endif
#ifndef INCLUDED_kha_graphics4_StencilAction
#include <hxinc/kha/graphics4/StencilAction.h>
#endif
#ifndef INCLUDED_kha_graphics4_StencilValue
#include <hxinc/kha/graphics4/StencilValue.h>
#endif
#ifndef INCLUDED_kha_graphics4_TessellationControlShader
#include <hxinc/kha/graphics4/TessellationControlShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_TessellationEvaluationShader
#include <hxinc/kha/graphics4/TessellationEvaluationShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_TextureUnit
#include <hxinc/kha/graphics4/TextureUnit.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexElement
#include <hxinc/kha/graphics4/VertexElement.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexShader
#include <hxinc/kha/graphics4/VertexShader.h>
#endif
#ifndef INCLUDED_kha_graphics4_VertexStructure
#include <hxinc/kha/graphics4/VertexStructure.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_ConstantLocation
#include <hxinc/kha/kore/graphics4/ConstantLocation.h>
#endif
#ifndef INCLUDED_kha_kore_graphics4_TextureUnit
#include <hxinc/kha/kore/graphics4/TextureUnit.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_24da384208e5bf4f_64_new,"kha.graphics4.PipelineState","new",0x339c2ff2,"kha.graphics4.PipelineState.new","kha/graphics4/PipelineState.hx",64,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_70_delete,"kha.graphics4.PipelineState","delete",0xa056e7d9,"kha.graphics4.PipelineState.delete","kha/graphics4/PipelineState.hx",70,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_112_linkWithStructures2,"kha.graphics4.PipelineState","linkWithStructures2",0x8868fba4,"kha.graphics4.PipelineState.linkWithStructures2","kha/graphics4/PipelineState.hx",112,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_116_compile,"kha.graphics4.PipelineState","compile",0x1c53b605,"kha.graphics4.PipelineState.compile","kha/graphics4/PipelineState.hx",116,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_133_getConstantLocation,"kha.graphics4.PipelineState","getConstantLocation",0x57767c01,"kha.graphics4.PipelineState.getConstantLocation","kha/graphics4/PipelineState.hx",133,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_140_initConstantLocation,"kha.graphics4.PipelineState","initConstantLocation",0x84c02317,"kha.graphics4.PipelineState.initConstantLocation","kha/graphics4/PipelineState.hx",140,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_144_getTextureUnit,"kha.graphics4.PipelineState","getTextureUnit",0x9659a1b7,"kha.graphics4.PipelineState.getTextureUnit","kha/graphics4/PipelineState.hx",144,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_151_initTextureUnit,"kha.graphics4.PipelineState","initTextureUnit",0x465d5261,"kha.graphics4.PipelineState.initTextureUnit","kha/graphics4/PipelineState.hx",151,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_246_setStates,"kha.graphics4.PipelineState","setStates",0x6d3aa796,"kha.graphics4.PipelineState.setStates","kha/graphics4/PipelineState.hx",246,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_251_set2,"kha.graphics4.PipelineState","set2",0xf85bd27e,"kha.graphics4.PipelineState.set2","kha/graphics4/PipelineState.hx",251,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_256_set,"kha.graphics4.PipelineState","set",0x339ffb34,"kha.graphics4.PipelineState.set","kha/graphics4/PipelineState.hx",256,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_156_getBlendFunc,"kha.graphics4.PipelineState","getBlendFunc",0x879eb6ed,"kha.graphics4.PipelineState.getBlendFunc","kha/graphics4/PipelineState.hx",156,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_261__unused1,"kha.graphics4.PipelineState","_unused1",0x0f95a30a,"kha.graphics4.PipelineState._unused1","kha/graphics4/PipelineState.hx",261,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_266__unused2,"kha.graphics4.PipelineState","_unused2",0x0f95a30b,"kha.graphics4.PipelineState._unused2","kha/graphics4/PipelineState.hx",266,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_271__unused3,"kha.graphics4.PipelineState","_unused3",0x0f95a30c,"kha.graphics4.PipelineState._unused3","kha/graphics4/PipelineState.hx",271,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_276__unused4,"kha.graphics4.PipelineState","_unused4",0x0f95a30d,"kha.graphics4.PipelineState._unused4","kha/graphics4/PipelineState.hx",276,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_281__unused5,"kha.graphics4.PipelineState","_unused5",0x0f95a30e,"kha.graphics4.PipelineState._unused5","kha/graphics4/PipelineState.hx",281,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_286__unused6,"kha.graphics4.PipelineState","_unused6",0x0f95a30f,"kha.graphics4.PipelineState._unused6","kha/graphics4/PipelineState.hx",286,0x454a2300)
HX_LOCAL_STACK_FRAME(_hx_pos_24da384208e5bf4f_291__unused7,"kha.graphics4.PipelineState","_unused7",0x0f95a310,"kha.graphics4.PipelineState._unused7","kha/graphics4/PipelineState.hx",291,0x454a2300)

static Kore::Graphics4::ZCompareMode convertCompareMode(int mode) {
	switch (mode) {
	case 0:
		return Kore::Graphics4::ZCompareAlways;
	case 1:
		return Kore::Graphics4::ZCompareNever;
	case 2:
		return Kore::Graphics4::ZCompareEqual;
	case 3:
		return Kore::Graphics4::ZCompareNotEqual;
	case 4:
		return Kore::Graphics4::ZCompareLess;
	case 5:
		return Kore::Graphics4::ZCompareLessEqual;
	case 6:
		return Kore::Graphics4::ZCompareGreater;
	case 7:
	default:
		return Kore::Graphics4::ZCompareGreaterEqual;
	}
}

static Kore::Graphics4::StencilAction convertStencilAction(int action) {
	switch (action) {
	case 0:
		return Kore::Graphics4::Keep;
	case 1:
		return Kore::Graphics4::Zero;
	case 2:
		return Kore::Graphics4::Replace;
	case 3:
		return Kore::Graphics4::Increment;
	case 4:
		return Kore::Graphics4::IncrementWrap;
	case 5:
		return Kore::Graphics4::Decrement;
	case 6:
		return Kore::Graphics4::DecrementWrap;
	case 7:
	default:
		return Kore::Graphics4::Invert;	
	}
}

namespace kha{
namespace graphics4{

void PipelineState_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_64_new)
HXLINE(  65)		super::__construct();
HXLINE(  66)		pipeline = new Kore::Graphics4::PipelineState;;
            	}

Dynamic PipelineState_obj::__CreateEmpty() { return new PipelineState_obj; }

void *PipelineState_obj::_hx_vtable = 0;

Dynamic PipelineState_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PipelineState_obj > _hx_result = new PipelineState_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PipelineState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x0bb48e1a) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x0bb48e1a;
	} else {
		return inClassId==(int)0x7a5f9adb;
	}
}

void PipelineState_obj::_hx_delete(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_70_delete)
HXDLIN(  70)		delete pipeline; pipeline = nullptr;;
            	}


HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,_hx_delete,(void))

void PipelineState_obj::linkWithStructures2( ::kha::graphics4::VertexStructure structure0, ::kha::graphics4::VertexStructure structure1, ::kha::graphics4::VertexStructure structure2, ::kha::graphics4::VertexStructure structure3,int size){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_112_linkWithStructures2)
            	
		pipeline->vertexShader = vertexShader->shader;
		pipeline->fragmentShader = fragmentShader->shader;
		if (geometryShader != null()) pipeline->geometryShader = geometryShader->shader;
		if (tessellationControlShader != null()) pipeline->tessellationControlShader = tessellationControlShader->shader;
		if (tessellationEvaluationShader != null()) pipeline->tessellationEvaluationShader = tessellationEvaluationShader->shader;
		Kore::Graphics4::VertexStructure s0, s1, s2, s3;
		Kore::Graphics4::VertexStructure* structures2[4] = { &s0, &s1, &s2, &s3 };
		::kha::graphics4::VertexStructure* structures[4] = { &structure0, &structure1, &structure2, &structure3 };
		for (int i1 = 0; i1 < size; ++i1) {
			structures2[i1]->instanced = (*structures[i1])->instanced;
			for (int i2 = 0; i2 < (*structures[i1])->size(); ++i2) {
				Kore::Graphics4::VertexData data;
				switch ((*structures[i1])->get(i2)->data) {
				case 0:
					data = Kore::Graphics4::Float1VertexData;
					break;
				case 1:
					data = Kore::Graphics4::Float2VertexData;
					break;
				case 2:
					data = Kore::Graphics4::Float3VertexData;
					break;
				case 3:
					data = Kore::Graphics4::Float4VertexData;
					break;
				case 4:
					data = Kore::Graphics4::Float4x4VertexData;
					break;
				}
				pipeline->inputLayout[i1] = structures2[i1];
				pipeline->inputLayout[i1]->add((*structures[i1])->get(i2)->name, data);
			}
		}
		for (int i = size; i < 16; ++i) {
			pipeline->inputLayout[i] = nullptr;
		}
		pipeline->compile();
	

            	}


HX_DEFINE_DYNAMIC_FUNC5(PipelineState_obj,linkWithStructures2,(void))

void PipelineState_obj::compile(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_116_compile)
HXLINE( 117)		int stencilReferenceValue = 0;
HXLINE( 118)		{
HXLINE( 118)			 ::kha::graphics4::StencilValue _g = this->stencilReferenceValue;
HXDLIN( 118)			if ((_g->_hx_getIndex() == 1)) {
HXLINE( 119)				int value = _g->_hx_getInt(0);
HXLINE( 120)				stencilReferenceValue = value;
            			}
            		}
HXLINE( 123)		int _hx_tmp = _hx_getEnumValueIndex(this->cullMode);
HXDLIN( 123)		int _hx_tmp1 = _hx_getEnumValueIndex(this->depthMode);
HXDLIN( 123)		int _hx_tmp2 = _hx_getEnumValueIndex(this->stencilMode);
HXDLIN( 123)		int _hx_tmp3 = _hx_getEnumValueIndex(this->stencilBothPass);
HXDLIN( 123)		int _hx_tmp4 = _hx_getEnumValueIndex(this->stencilDepthFail);
HXDLIN( 123)		int _hx_tmp5 = _hx_getEnumValueIndex(this->stencilFail);
HXLINE( 124)		int _hx_tmp6 = ::kha::graphics4::PipelineState_obj::getBlendFunc(this->blendSource);
HXDLIN( 124)		int _hx_tmp7 = ::kha::graphics4::PipelineState_obj::getBlendFunc(this->blendDestination);
HXDLIN( 124)		int _hx_tmp8 = ::kha::graphics4::PipelineState_obj::getBlendFunc(this->alphaBlendSource);
HXLINE( 123)		this->setStates(_hx_tmp,_hx_tmp1,_hx_tmp2,_hx_tmp3,_hx_tmp4,_hx_tmp5,stencilReferenceValue,_hx_tmp6,_hx_tmp7,_hx_tmp8,::kha::graphics4::PipelineState_obj::getBlendFunc(this->alphaBlendDestination));
HXLINE( 126)		 ::kha::graphics4::VertexStructure _hx_tmp9;
HXDLIN( 126)		if ((this->inputLayout->length > 0)) {
HXLINE( 126)			_hx_tmp9 = this->inputLayout->__get(0).StaticCast<  ::kha::graphics4::VertexStructure >();
            		}
            		else {
HXLINE( 126)			_hx_tmp9 = null();
            		}
HXLINE( 127)		 ::kha::graphics4::VertexStructure _hx_tmp10;
HXDLIN( 127)		if ((this->inputLayout->length > 1)) {
HXLINE( 127)			_hx_tmp10 = this->inputLayout->__get(1).StaticCast<  ::kha::graphics4::VertexStructure >();
            		}
            		else {
HXLINE( 127)			_hx_tmp10 = null();
            		}
HXLINE( 128)		 ::kha::graphics4::VertexStructure _hx_tmp11;
HXDLIN( 128)		if ((this->inputLayout->length > 2)) {
HXLINE( 128)			_hx_tmp11 = this->inputLayout->__get(2).StaticCast<  ::kha::graphics4::VertexStructure >();
            		}
            		else {
HXLINE( 128)			_hx_tmp11 = null();
            		}
HXLINE( 129)		 ::kha::graphics4::VertexStructure _hx_tmp12;
HXDLIN( 129)		if ((this->inputLayout->length > 3)) {
HXLINE( 129)			_hx_tmp12 = this->inputLayout->__get(3).StaticCast<  ::kha::graphics4::VertexStructure >();
            		}
            		else {
HXLINE( 129)			_hx_tmp12 = null();
            		}
HXLINE( 125)		this->linkWithStructures2(_hx_tmp9,_hx_tmp10,_hx_tmp11,_hx_tmp12,this->inputLayout->length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,compile,(void))

::Dynamic PipelineState_obj::getConstantLocation(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_24da384208e5bf4f_133_getConstantLocation)
HXLINE( 134)		 ::kha::kore::graphics4::ConstantLocation location =  ::kha::kore::graphics4::ConstantLocation_obj::__alloc( HX_CTX );
HXLINE( 135)		this->initConstantLocation(location,name);
HXLINE( 136)		return location;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PipelineState_obj,getConstantLocation,return )

void PipelineState_obj::initConstantLocation( ::kha::kore::graphics4::ConstantLocation location,::String name){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_140_initConstantLocation)
            	location->location = pipeline->getConstantLocation(name.c_str());

            	}


HX_DEFINE_DYNAMIC_FUNC2(PipelineState_obj,initConstantLocation,(void))

::Dynamic PipelineState_obj::getTextureUnit(::String name){
            	HX_GC_STACKFRAME(&_hx_pos_24da384208e5bf4f_144_getTextureUnit)
HXLINE( 145)		 ::kha::kore::graphics4::TextureUnit unit =  ::kha::kore::graphics4::TextureUnit_obj::__alloc( HX_CTX );
HXLINE( 146)		this->initTextureUnit(unit,name);
HXLINE( 147)		return unit;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PipelineState_obj,getTextureUnit,return )

void PipelineState_obj::initTextureUnit( ::kha::kore::graphics4::TextureUnit unit,::String name){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_151_initTextureUnit)
            	unit->unit = pipeline->getTextureUnit(name.c_str());

            	}


HX_DEFINE_DYNAMIC_FUNC2(PipelineState_obj,initTextureUnit,(void))

void PipelineState_obj::setStates(int cullMode,int depthMode,int stencilMode,int stencilBothPass,int stencilDepthFail,int stencilFail,int stencilReferenceValue,int blendSource,int blendDestination,int alphaBlendSource,int alphaBlendDestination){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_246_setStates)
            	
		switch (cullMode) {
		case 0:
			pipeline->cullMode = Kore::Graphics4::Clockwise;
			break;
		case 1:
			pipeline->cullMode = Kore::Graphics4::CounterClockwise;
			break;
		case 2:
			pipeline->cullMode = Kore::Graphics4::NoCulling;
			break;
		}

		switch (depthMode) {
		case 0:
			pipeline->depthMode = Kore::Graphics4::ZCompareAlways;
			break;
		case 1:
			pipeline->depthMode = Kore::Graphics4::ZCompareNever;
			break;
		case 2:
			pipeline->depthMode = Kore::Graphics4::ZCompareEqual;
			break;
		case 3:
			pipeline->depthMode = Kore::Graphics4::ZCompareNotEqual;
			break;
		case 4:
			pipeline->depthMode = Kore::Graphics4::ZCompareLess;
			break;
		case 5:
			pipeline->depthMode = Kore::Graphics4::ZCompareLessEqual;
			break;
		case 6:
			pipeline->depthMode = Kore::Graphics4::ZCompareGreater;
			break;
		case 7:
			pipeline->depthMode = Kore::Graphics4::ZCompareGreaterEqual;
			break;
		}
		pipeline->depthWrite = depthWrite;
		
		pipeline->stencilMode = convertCompareMode(stencilMode);
		pipeline->stencilBothPass = convertStencilAction(stencilBothPass);
		pipeline->stencilDepthFail = convertStencilAction(stencilDepthFail);
		pipeline->stencilFail = convertStencilAction(stencilFail);
		pipeline->stencilReferenceValue = stencilReferenceValue;
		pipeline->stencilReadMask = stencilReadMask;
		pipeline->stencilWriteMask = stencilWriteMask;
		
		pipeline->blendSource = (Kore::Graphics4::BlendingOperation)blendSource;
		pipeline->blendDestination = (Kore::Graphics4::BlendingOperation)blendDestination;
		pipeline->alphaBlendSource = (Kore::Graphics4::BlendingOperation)alphaBlendSource;
		pipeline->alphaBlendDestination = (Kore::Graphics4::BlendingOperation)alphaBlendDestination;
		
		for (int i = 0; i < 8; ++i) {
			pipeline->colorWriteMaskRed[i] = colorWriteMasksRed[i];
			pipeline->colorWriteMaskGreen[i] = colorWriteMasksGreen[i];
			pipeline->colorWriteMaskBlue[i] = colorWriteMasksBlue[i];
			pipeline->colorWriteMaskAlpha[i] = colorWriteMasksAlpha[i];
		}
		
		pipeline->conservativeRasterization = conservativeRasterization;
	

            	}


HX_DEFINE_DYNAMIC_FUNC11(PipelineState_obj,setStates,(void))

void PipelineState_obj::set2(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_251_set2)
            	Kore::Graphics4::setPipeline(pipeline);

            	}


HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,set2,(void))

void PipelineState_obj::set(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_256_set)
HXDLIN( 256)		this->set2();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,set,(void))

int PipelineState_obj::getBlendFunc( ::kha::graphics4::BlendingFactor factor){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_156_getBlendFunc)
HXDLIN( 156)		switch((int)(factor->_hx_getIndex())){
            			case (int)0: case (int)1: {
HXLINE( 158)				return 0;
            			}
            			break;
            			case (int)2: {
HXLINE( 160)				return 1;
            			}
            			break;
            			case (int)3: {
HXLINE( 162)				return 2;
            			}
            			break;
            			case (int)4: {
HXLINE( 164)				return 3;
            			}
            			break;
            			case (int)5: {
HXLINE( 166)				return 4;
            			}
            			break;
            			case (int)6: {
HXLINE( 168)				return 5;
            			}
            			break;
            			case (int)7: {
HXLINE( 170)				return 6;
            			}
            			break;
            			case (int)8: {
HXLINE( 172)				return 7;
            			}
            			break;
            			case (int)9: {
HXLINE( 174)				return 8;
            			}
            			break;
            			case (int)10: {
HXLINE( 176)				return 9;
            			}
            			break;
            		}
HXLINE( 156)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PipelineState_obj,getBlendFunc,return )

 ::kha::graphics4::VertexElement PipelineState_obj::_unused1(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_261__unused1)
HXDLIN( 261)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,_unused1,return )

int PipelineState_obj::_unused2(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_266__unused2)
HXDLIN( 266)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,_unused2,return )

 ::kha::graphics4::VertexShader PipelineState_obj::_unused3(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_271__unused3)
HXDLIN( 271)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,_unused3,return )

 ::kha::graphics4::FragmentShader PipelineState_obj::_unused4(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_276__unused4)
HXDLIN( 276)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,_unused4,return )

 ::kha::graphics4::GeometryShader PipelineState_obj::_unused5(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_281__unused5)
HXDLIN( 281)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,_unused5,return )

 ::kha::graphics4::TessellationControlShader PipelineState_obj::_unused6(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_286__unused6)
HXDLIN( 286)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,_unused6,return )

 ::kha::graphics4::TessellationEvaluationShader PipelineState_obj::_unused7(){
            	HX_STACKFRAME(&_hx_pos_24da384208e5bf4f_291__unused7)
HXDLIN( 291)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(PipelineState_obj,_unused7,return )


hx::ObjectPtr< PipelineState_obj > PipelineState_obj::__new() {
	hx::ObjectPtr< PipelineState_obj > __this = new PipelineState_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< PipelineState_obj > PipelineState_obj::__alloc(hx::Ctx *_hx_ctx) {
	PipelineState_obj *__this = (PipelineState_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(PipelineState_obj), true, "kha.graphics4.PipelineState"));
	*(void **)__this = PipelineState_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

PipelineState_obj::PipelineState_obj()
{
}

hx::Val PipelineState_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"set") ) { return hx::Val( set_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"set2") ) { return hx::Val( set2_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"delete") ) { return hx::Val( _hx_delete_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compile") ) { return hx::Val( compile_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"setStates") ) { return hx::Val( setStates_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"getTextureUnit") ) { return hx::Val( getTextureUnit_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"initTextureUnit") ) { return hx::Val( initTextureUnit_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"linkWithStructures2") ) { return hx::Val( linkWithStructures2_dyn() ); }
		if (HX_FIELD_EQ(inName,"getConstantLocation") ) { return hx::Val( getConstantLocation_dyn() ); }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"initConstantLocation") ) { return hx::Val( initConstantLocation_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool PipelineState_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_unused1") ) { outValue = _unused1_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_unused2") ) { outValue = _unused2_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_unused3") ) { outValue = _unused3_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_unused4") ) { outValue = _unused4_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_unused5") ) { outValue = _unused5_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_unused6") ) { outValue = _unused6_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"_unused7") ) { outValue = _unused7_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"getBlendFunc") ) { outValue = getBlendFunc_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *PipelineState_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *PipelineState_obj_sStaticStorageInfo = 0;
#endif

static ::String PipelineState_obj_sMemberFields[] = {
	HX_("delete",2b,c0,d8,6a),
	HX_("linkWithStructures2",12,d8,24,1b),
	HX_("compile",73,25,6f,83),
	HX_("getConstantLocation",6f,58,32,ea),
	HX_("initConstantLocation",e9,26,65,56),
	HX_("getTextureUnit",09,1c,c7,8b),
	HX_("initTextureUnit",cf,df,ba,10),
	HX_("setStates",84,4e,a3,65),
	HX_("set2",50,92,50,4c),
	HX_("set",a2,9b,57,00),
	::String(null()) };

hx::Class PipelineState_obj::__mClass;

static ::String PipelineState_obj_sStaticFields[] = {
	HX_("getBlendFunc",bf,98,f2,16),
	HX_("_unused1",dc,b3,7b,e0),
	HX_("_unused2",dd,b3,7b,e0),
	HX_("_unused3",de,b3,7b,e0),
	HX_("_unused4",df,b3,7b,e0),
	HX_("_unused5",e0,b3,7b,e0),
	HX_("_unused6",e1,b3,7b,e0),
	HX_("_unused7",e2,b3,7b,e0),
	::String(null())
};

void PipelineState_obj::__register()
{
	PipelineState_obj _hx_dummy;
	PipelineState_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.graphics4.PipelineState",00,0f,ad,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PipelineState_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PipelineState_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(PipelineState_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< PipelineState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PipelineState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PipelineState_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
} // end namespace graphics4
