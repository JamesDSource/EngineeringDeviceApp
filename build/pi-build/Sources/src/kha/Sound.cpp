// Generated by Haxe 4.0.0-preview.5+1aaf080
#include <hxcpp.h>

#ifndef INCLUDED_c5728fd05c542abe
#define INCLUDED_c5728fd05c542abe
#include "cpp_float32array.h"
#endif
#ifndef INCLUDED_Std
#include <hxinc/Std.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <hxinc/haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_haxe_io_BytesOutput
#include <hxinc/haxe/io/BytesOutput.h>
#endif
#ifndef INCLUDED_haxe_io_Error
#include <hxinc/haxe/io/Error.h>
#endif
#ifndef INCLUDED_haxe_io_Output
#include <hxinc/haxe/io/Output.h>
#endif
#ifndef INCLUDED_kha_Resource
#include <hxinc/kha/Resource.h>
#endif
#ifndef INCLUDED_kha_Sound
#include <hxinc/kha/Sound.h>
#endif
#ifndef INCLUDED_kha_arrays_Float32ArrayPrivate
#include <hxinc/kha/arrays/Float32ArrayPrivate.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_Reader
#include <hxinc/kha/audio2/ogg/vorbis/Reader.h>
#endif
#ifndef INCLUDED_kha_audio2_ogg_vorbis_data_Header
#include <hxinc/kha/audio2/ogg/vorbis/data/Header.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2b0e8ec76089fe14_14_new,"kha.Sound","new",0x1f644c57,"kha.Sound.new","kha/Sound.hx",14,0x5f2333fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2b0e8ec76089fe14_18_uncompress,"kha.Sound","uncompress",0x58f42fe4,"kha.Sound.uncompress","kha/Sound.hx",18,0x5f2333fa)
HX_LOCAL_STACK_FRAME(_hx_pos_2b0e8ec76089fe14_47_unload,"kha.Sound","unload",0x00feb968,"kha.Sound.unload","kha/Sound.hx",47,0x5f2333fa)
namespace kha{

void Sound_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_2b0e8ec76089fe14_14_new)
            	}

Dynamic Sound_obj::__CreateEmpty() { return new Sound_obj; }

void *Sound_obj::_hx_vtable = 0;

Dynamic Sound_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Sound_obj > _hx_result = new Sound_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Sound_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6dd9d24b;
}

static ::kha::Resource_obj _hx_kha_Sound__hx_kha_Resource= {
	( void (hx::Object::*)())&::kha::Sound_obj::unload,
};

void *Sound_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0xf962acd2: return &_hx_kha_Sound__hx_kha_Resource;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}

void Sound_obj::uncompress( ::Dynamic done){
            	HX_GC_STACKFRAME(&_hx_pos_2b0e8ec76089fe14_18_uncompress)
HXLINE(  20)		if (hx::IsNotNull( this->uncompressedData )) {
HXLINE(  21)			done();
HXLINE(  22)			return;
            		}
HXLINE(  25)		 ::haxe::io::BytesOutput output =  ::haxe::io::BytesOutput_obj::__alloc( HX_CTX );
HXLINE(  26)		 ::kha::audio2::ogg::vorbis::data::Header header = ::kha::audio2::ogg::vorbis::Reader_obj::readAll(this->compressedData,output,true);
HXLINE(  27)		 ::haxe::io::Bytes soundBytes = output->getBytes();
HXLINE(  28)		int count = ::Std_obj::_hx_int((( (Float)(soundBytes->length) ) / ( (Float)(4) )));
HXLINE(  29)		if ((header->channel == 1)) {
HXLINE(  30)			 ::kha::arrays::Float32ArrayPrivate this1 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,(count * 2));
HXDLIN(  30)			this->uncompressedData = this1;
HXLINE(  31)			{
HXLINE(  31)				int _g = 0;
HXDLIN(  31)				int _g1 = count;
HXDLIN(  31)				while((_g < _g1)){
HXLINE(  31)					_g = (_g + 1);
HXDLIN(  31)					int i = (_g - 1);
HXLINE(  32)					{
HXLINE(  32)						 ::kha::arrays::Float32ArrayPrivate this2 = this->uncompressedData;
HXDLIN(  32)						int pos = (i * 4);
HXDLIN(  32)						bool _hx_tmp;
HXDLIN(  32)						if ((pos >= 0)) {
HXLINE(  32)							_hx_tmp = ((pos + 4) > soundBytes->length);
            						}
            						else {
HXLINE(  32)							_hx_tmp = true;
            						}
HXDLIN(  32)						if (_hx_tmp) {
HXLINE(  32)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  32)						float value = ( (float)( ::__hxcpp_memory_get_float(soundBytes->b,pos)) );
HXDLIN(  32)						this2->self.set((i * 2),value);
            					}
HXLINE(  33)					{
HXLINE(  33)						 ::kha::arrays::Float32ArrayPrivate this3 = this->uncompressedData;
HXDLIN(  33)						int pos1 = (i * 4);
HXDLIN(  33)						bool _hx_tmp1;
HXDLIN(  33)						if ((pos1 >= 0)) {
HXLINE(  33)							_hx_tmp1 = ((pos1 + 4) > soundBytes->length);
            						}
            						else {
HXLINE(  33)							_hx_tmp1 = true;
            						}
HXDLIN(  33)						if (_hx_tmp1) {
HXLINE(  33)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  33)						float value1 = ( (float)( ::__hxcpp_memory_get_float(soundBytes->b,pos1)) );
HXDLIN(  33)						this3->self.set(((i * 2) + 1),value1);
            					}
            				}
            			}
            		}
            		else {
HXLINE(  37)			 ::kha::arrays::Float32ArrayPrivate this4 =  ::kha::arrays::Float32ArrayPrivate_obj::__alloc( HX_CTX ,count);
HXDLIN(  37)			this->uncompressedData = this4;
HXLINE(  38)			{
HXLINE(  38)				int _g2 = 0;
HXDLIN(  38)				int _g11 = count;
HXDLIN(  38)				while((_g2 < _g11)){
HXLINE(  38)					_g2 = (_g2 + 1);
HXDLIN(  38)					int i1 = (_g2 - 1);
HXLINE(  39)					{
HXLINE(  39)						 ::kha::arrays::Float32ArrayPrivate this5 = this->uncompressedData;
HXDLIN(  39)						int pos2 = (i1 * 4);
HXDLIN(  39)						bool _hx_tmp2;
HXDLIN(  39)						if ((pos2 >= 0)) {
HXLINE(  39)							_hx_tmp2 = ((pos2 + 4) > soundBytes->length);
            						}
            						else {
HXLINE(  39)							_hx_tmp2 = true;
            						}
HXDLIN(  39)						if (_hx_tmp2) {
HXLINE(  39)							HX_STACK_DO_THROW(::haxe::io::Error_obj::OutsideBounds_dyn());
            						}
HXDLIN(  39)						float value2 = ( (float)( ::__hxcpp_memory_get_float(soundBytes->b,pos2)) );
HXDLIN(  39)						this5->self.set(i1,value2);
            					}
            				}
            			}
            		}
HXLINE(  42)		this->compressedData = null();
HXLINE(  43)		done();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Sound_obj,uncompress,(void))

void Sound_obj::unload(){
            	HX_STACKFRAME(&_hx_pos_2b0e8ec76089fe14_47_unload)
HXLINE(  48)		this->compressedData = null();
HXLINE(  49)		this->uncompressedData = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Sound_obj,unload,(void))


hx::ObjectPtr< Sound_obj > Sound_obj::__new() {
	hx::ObjectPtr< Sound_obj > __this = new Sound_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< Sound_obj > Sound_obj::__alloc(hx::Ctx *_hx_ctx) {
	Sound_obj *__this = (Sound_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Sound_obj), true, "kha.Sound"));
	*(void **)__this = Sound_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Sound_obj::Sound_obj()
{
}

void Sound_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Sound);
	HX_MARK_MEMBER_NAME(compressedData,"compressedData");
	HX_MARK_MEMBER_NAME(uncompressedData,"uncompressedData");
	HX_MARK_END_CLASS();
}

void Sound_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(compressedData,"compressedData");
	HX_VISIT_MEMBER_NAME(uncompressedData,"uncompressedData");
}

hx::Val Sound_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"unload") ) { return hx::Val( unload_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"uncompress") ) { return hx::Val( uncompress_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"compressedData") ) { return hx::Val( compressedData ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uncompressedData") ) { return hx::Val( uncompressedData ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Sound_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 14:
		if (HX_FIELD_EQ(inName,"compressedData") ) { compressedData=inValue.Cast<  ::haxe::io::Bytes >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"uncompressedData") ) { uncompressedData=inValue.Cast<  ::kha::arrays::Float32ArrayPrivate >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Sound_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("compressedData",4b,a3,dd,44));
	outFields->push(HX_("uncompressedData",64,13,ff,51));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo Sound_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::haxe::io::Bytes */ ,(int)offsetof(Sound_obj,compressedData),HX_("compressedData",4b,a3,dd,44)},
	{hx::fsObject /*  ::kha::arrays::Float32ArrayPrivate */ ,(int)offsetof(Sound_obj,uncompressedData),HX_("uncompressedData",64,13,ff,51)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Sound_obj_sStaticStorageInfo = 0;
#endif

static ::String Sound_obj_sMemberFields[] = {
	HX_("compressedData",4b,a3,dd,44),
	HX_("uncompressedData",64,13,ff,51),
	HX_("uncompress",fb,2e,83,09),
	HX_("unload",ff,a0,8c,65),
	::String(null()) };

hx::Class Sound_obj::__mClass;

void Sound_obj::__register()
{
	Sound_obj _hx_dummy;
	Sound_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("kha.Sound",e5,d4,6b,a1);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Sound_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Sound_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Sound_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Sound_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace kha
